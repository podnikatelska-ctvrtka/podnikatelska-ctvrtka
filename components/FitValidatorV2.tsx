import { useState, useEffect, useRef, useMemo } from "react";
import { 
  CheckCircle, 
  AlertCircle, 
  RefreshCw, 
  ArrowRight, 
  ArrowLeft,
  Lightbulb,
  Target,
  Flame,
  Star,
  TrendingUp,
  TrendingDown,
  ChevronUp,
  ChevronDown,
  Info,
  X,
  RotateCcw,
  Plus,
  Sparkles
} from "lucide-react";
import { supabase } from "../lib/supabase";
import { Button } from "./ui/button";
import { Alert, AlertDescription } from "./ui/alert";
import { FitStepInstructions } from "./FitStepInstructions";
import { trackCourseEvent, trackError } from "../lib/sentry";
import { toast } from "sonner";
import { BottomSheet } from "./BottomSheet";
import { haptic } from "../lib/haptics";
import { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from "./ui/accordion";

interface Props {
  userId: string;
  selectedSegment?: string;
  onSegmentChange?: (segment: string) => void;
  onValueChange?: (value: string) => void;
  onNavigateToLesson?: (lessonId: number) => void;
  onComplete?: (fitScore: number) => void; // ‚úÖ Callback pro dokonƒçen√≠ lekce
  isLessonCompleted?: boolean; // ‚úÖ Je lekce 16 ji≈æ dokonƒçen√°?
  onAchievementUnlocked?: (achievementId: string) => void; // üéâ Achievement callback
}

interface VPCItem {
  id: string;
  text: string;
  priority?: number; // 0 = highest, higher numbers = lower priority
  count?: number; // Kolik lid√≠ toto zmi≈àovalo
  percentage?: number; // Automaticky vypoƒç√≠tan√© %
}

interface ValueMapItem {
  text: string;
  color: string;
}

// ‚ûï Add Item Input Component - MOBILN√ç VERZE s BottomSheet
function AddItemInput({ 
  category, 
  placeholder, 
  onAdd, 
  color 
}: { 
  category: string;
  placeholder: string;
  onAdd: (text: string) => Promise<boolean | void>;
  color: 'yellow' | 'red' | 'green';
}) {
  const [isSheetOpen, setIsSheetOpen] = useState(false);
  const [newText, setNewText] = useState('');
  const [isSubmitting, setIsSubmitting] = useState(false);
  
  const handleAdd = async () => {
    if (!newText.trim()) return;
    
    haptic('light');
    setIsSubmitting(true);
    const success = await onAdd(newText);
    setIsSubmitting(false);
    
    // ‚úÖ Success je handled v onAdd (m√° vlastn√≠ toast) - jen reset field
    if (success !== false) {
      haptic('success');
      setNewText('');
      setIsSheetOpen(false);
    }
    // ‚ùå Error je taky handled v onAdd - nic nedƒõlej
  };

  const handleOpen = () => {
    haptic('light');
    setIsSheetOpen(true);
  };

  const handleClose = () => {
    setIsSheetOpen(false);
    setNewText('');
  };
  
  const borderColor = color === 'yellow' ? 'border-yellow-300' 
                    : color === 'red' ? 'border-red-300' 
                    : 'border-green-300';
  
  const bgColor = color === 'yellow' ? 'bg-yellow-50' 
                : color === 'red' ? 'bg-red-50' 
                : 'bg-green-50';
  
  const textColor = color === 'yellow' ? 'text-yellow-700' 
                  : color === 'red' ? 'text-red-700' 
                  : 'text-green-700';

  const buttonColor = color === 'yellow' ? 'bg-yellow-600 hover:bg-yellow-700' 
                    : color === 'red' ? 'bg-red-600 hover:bg-red-700' 
                    : 'bg-green-600 hover:bg-green-700';

  const categoryLabel = category === 'jobs' ? '√ökol z√°kazn√≠ka'
                      : category === 'pains' ? 'Bolest z√°kazn√≠ka'
                      : 'Zisk z√°kazn√≠ka';
  
  return (
    <>
      {/* Add Button */}
      <button
        onClick={handleOpen}
        className={`w-full p-3 border-2 border-dashed ${borderColor} rounded-lg ${textColor} hover:bg-gray-50 transition-all text-sm flex items-center justify-center gap-2`}
      >
        <Plus className="w-4 h-4" />
        {placeholder}
      </button>

      {/* Bottom Sheet */}
      <BottomSheet
        isOpen={isSheetOpen}
        onClose={handleClose}
        title={categoryLabel}
        snapPoints={[0.5, 0.85]}
        defaultSnap={0}
      >
        <div className="space-y-4">
          {/* Instrukƒçn√≠ text */}
          <div className={`p-3 ${bgColor} rounded-lg`}>
            <p className={`text-sm ${textColor}`}>
              {category === 'jobs' && 'üìã Jakou pr√°ci/√∫kol se z√°kazn√≠k sna≈æ√≠ splnit?'}
              {category === 'pains' && 'üò∞ Co z√°kazn√≠ka tr√°p√≠, frustruje nebo brzd√≠?'}
              {category === 'gains' && 'üéØ Jak√© v√Ωhody nebo zisky z√°kazn√≠k hled√°?'}
            </p>
          </div>

          {/* Text Input */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              Text polo≈æky
            </label>
            <input
              type="text"
              value={newText}
              onChange={(e) => setNewText(e.target.value)}
              placeholder={placeholder}
              className="w-full px-4 py-3 border-2 border-gray-300 rounded-lg text-base focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
              autoFocus
              onKeyDown={(e) => {
                if (e.key === 'Enter') {
                  console.log(`‚å®Ô∏è [${category}-ENTER] Enter pressed`);
                  e.preventDefault();
                  handleAdd();
                }
              }}
              disabled={isSubmitting}
            />
          </div>

          {/* Action Buttons */}
          <div className="flex gap-3 pt-2">
            <Button
              onClick={() => {
                console.log(`üñ±Ô∏è [${category}-BUTTON] Button clicked`);
                handleAdd();
              }}
              disabled={!newText.trim() || isSubmitting}
              size="lg"
              className={`flex-1 h-14 text-lg ${buttonColor}`}
            >
              <CheckCircle className="w-5 h-5 mr-2" />
              {isSubmitting ? 'P≈ôid√°v√°m...' : 'P≈ôidat'}
            </Button>
            <Button
              onClick={handleClose}
              variant="outline"
              size="lg"
              className="h-14 px-6"
              disabled={isSubmitting}
            >
              Zru≈°it
            </Button>
          </div>
        </div>
      </BottomSheet>
    </>
  );
}

// Priority Item Component s ƒç√≠seln√Ωm hodnocen√≠m
function PriorityItemWithScore({ 
  text, 
  index,
  total,
  totalRespondents,
  count = 0,
  percentage = 0,
  color,
  onUpdateCount,
  onDelete,
  showPriorities = false,
  allItems = []
}: { 
  text: string; 
  index: number;
  total: number;
  totalRespondents: number;
  count?: number;
  percentage?: number;
  color: 'yellow' | 'red' | 'green';
  onUpdateCount: (count: number) => void;
  onDelete?: () => void;
  showPriorities?: boolean;
  allItems?: { percentage?: number }[];
}) {
  // ‚úÖ NOV√Å LOGIKA: Zjisti jestli je TOP 3 s TIES detection!
  const validItems = allItems
    .map((item, idx) => ({ ...item, originalIndex: idx }))
    .filter(item => (item.percentage || 0) > 0)
    .sort((a, b) => (b.percentage || 0) - (a.percentage || 0));
  
  let isTop = false;
  
  if (validItems.length > 0 && (percentage || 0) > 0) {
    // Pokud maj√≠ v≈°echny stejn√© %, v≈°echny jsou TOP
    const firstPercentage = validItems[0]?.percentage || 0;
    const allSame = validItems.every(item => item.percentage === firstPercentage);
    
    if (allSame) {
      isTop = true;
      if (index === 0) console.log('‚ú® All same %:', firstPercentage, '‚Üí v≈°echny TOP');
    } else if (validItems.length <= 3) {
      isTop = true;
    } else {
      // Top 3 + ties
      const top3 = validItems.slice(0, 3);
      const thirdPercentage = top3[2]?.percentage || 0;
      
      // Je v top 3 NEBO m√° stejn√© % jako 3. m√≠sto?
      const myIndex = validItems.findIndex(item => item.originalIndex === index);
      isTop = myIndex !== -1 && (myIndex < 3 || percentage === thirdPercentage);
      
      if (percentage === thirdPercentage && myIndex >= 3) {
        console.log('üîó Tie detected for:', text.substring(0, 20), '| %:', percentage, '| isTop:', isTop);
      }
    }
  }

  // Barvy podle typu - jen kdy≈æ showPriorities
  const bgColor = (showPriorities && isTop)
    ? color === 'yellow' ? 'bg-yellow-50' 
      : color === 'red' ? 'bg-red-50' 
      : 'bg-green-50'
    : 'bg-white';
  
  const borderColor = (showPriorities && isTop)
    ? color === 'yellow' ? 'border-yellow-400'
      : color === 'red' ? 'border-red-400'
      : 'border-green-400'
    : 'border-gray-200';
  
  // Text barva podle typu
  const textColor = color === 'yellow' ? 'text-yellow-900' 
                  : color === 'red' ? 'text-red-900' 
                  : 'text-green-900';
  
  // Hvƒõzdiƒçky podle % (5 hvƒõzdiƒçek)
  const stars = Math.round((percentage / 100) * 5);

  return (
    <div
      className={`flex flex-col gap-3 p-4 rounded-lg border-2 ${bgColor} ${borderColor} transition-all animate-in fade-in slide-in-from-bottom-4 duration-300`}
    >
      {/* Text */}
      <div className="flex items-start justify-between gap-3">
        <p className={`${textColor} flex-1`}>{text}</p>
        <div className="flex items-center gap-2">
          {showPriorities && isTop && (
            <Star className="w-5 h-5 text-yellow-500 fill-yellow-500 flex-shrink-0" />
          )}
          {/* Delete button pro polo≈æky s 0 lid√≠ */}
          {count === 0 && onDelete && (
            <button
              onClick={onDelete}
              className="text-gray-400 hover:text-red-600 transition-colors"
              title="Smazat (nikdo to nezm√≠nil)"
            >
              üóëÔ∏è
            </button>
          )}
        </div>
      </div>
      
      {/* Input pro poƒçet lid√≠ + Progress Bar */}
      <div className="space-y-2">
        <div className="flex items-center gap-2 flex-wrap">
          <label className="text-sm text-gray-600">Kolik lid√≠:</label>
          <input
            type="number"
            min="0"
            max={totalRespondents}
            value={count}
            onChange={(e) => {
              const newCount = parseInt(e.target.value) || 0;
              // ‚ö†Ô∏è LIMIT: Nem≈Ø≈æe≈° m√≠t v√≠c ne≈æ total respondent≈Ø
              onUpdateCount(Math.min(newCount, totalRespondents));
            }}
            onFocus={(e) => e.target.select()}
            className="w-16 px-3 py-2 border-2 border-gray-300 rounded-lg focus:border-blue-500 focus:ring-2 focus:ring-blue-200 transition-all text-center font-medium"
          />
          <span className="text-sm text-gray-600">/ {totalRespondents}</span>
          
          {/* Automatick√© % a hvƒõzdiƒçky */}
          {count > 0 && (
            <>
              <span className={`text-sm font-bold ${
                percentage >= 70 ? 'text-green-600' : 
                percentage >= 40 ? 'text-blue-600' : 
                'text-gray-600'
              }`}>
                = {percentage}%
              </span>
              <div className="flex items-center gap-0.5">
                {[...Array(5)].map((_, i) => (
                  <Star 
                    key={i} 
                    className={`w-3 h-3 ${i < stars ? 'text-yellow-500 fill-yellow-500' : 'text-gray-300'}`}
                  />
                ))}
              </div>
            </>
          )}
        </div>
        
        {/* Progress Bar */}
        {count > 0 && (
          <div className="w-full h-2 bg-gray-200 rounded-full overflow-hidden">
            <div
              style={{ width: `${percentage}%` }}
              className={`h-full transition-all duration-500 ${
                percentage >= 70 ? 'bg-green-500' : 
                percentage >= 40 ? 'bg-blue-500' : 
                'bg-gray-400'
              }`}
            />
          </div>
        )}
      </div>
      
      {/* Priority label */}
      {showPriorities && isTop && (
        <p className="text-xs text-green-700 flex items-center gap-1">
          <Flame className="w-3 h-3" />
          Top 3 priorita
        </p>
      )}
    </div>
  );
}

//     UNIVERZ√ÅLN√ç PR≈ÆVODCE - funguje pro V≈†ECHNY segmenty
function getGuideForSegment(segmentName: string) {
  return {
    title: `üéØ Jak zjistit co ${segmentName || 'v√°≈° segment'} opravdu pot≈ôebuj√≠`,
    description: "Kl√≠ƒçem k √∫spƒõchu je pochopit opravdov√© pot≈ôeby va≈°ich z√°kazn√≠k≈Ø.",
    questions: {
      jobs: [
        "Kv≈Øli ƒçemu k v√°m tento segment p≈ôich√°z√≠?",
        "Co chtƒõj√≠ udƒõlat nebo dos√°hnout?",
        "Jak√© √∫koly za nƒõ ≈ôe≈°√≠te?"
      ],
      pains: [
        "Na co si tento segment nejv√≠c stƒõ≈æuje?",
        "Co je frustruje u souƒçasn√Ωch ≈ôe≈°en√≠?",
        "Jak√© p≈ôek√°≈æky jim br√°n√≠ v √∫spƒõchu?"
      ],
      gains: [
        "Co tento segment v referenc√≠ch v≈ædy zmi≈àuje?",
        "ƒå√≠m se chlub√≠ ostatn√≠m?",
        "Co oce≈àuj√≠ nad r√°mec z√°kladn√≠ slu≈æby?"
      ]
    },
    examples: {
      jobs: ["Zeptejte se 3-5 lid√≠ z tohoto segmentu", "Analyzujte jejich odpovƒõdi", "Najdƒõte opakuj√≠c√≠ se vzorce"],
      pains: ["Kouknƒõte na diskuze/f√≥ra kde se pohybuj√≠", "Co neust√°le ≈ôe≈°√≠?", "Na co si stƒõ≈æuj√≠?"],
      gains: ["Co v hodnocen√≠ch/referenc√≠ch zmi≈àuj√≠?", "Co je pro nƒõ 'must have'?", "Co pova≈æuj√≠ za bonus?"]
    }
  };
}

export function FitValidatorV2({ userId, selectedSegment, onSegmentChange, onValueChange, onNavigateToLesson, onComplete, isLessonCompleted, onAchievementUnlocked }: Props) {
  // Step state: 1 = Discovery, 2 = Prioritization, 3 = Validation
  const [currentStep, setCurrentStep] = useState(1);
  
  // üéØ Toggle mezi Customer Profile a Value Map v Kroku 2
  const [step2View, setStep2View] = useState<'customer' | 'value'>('customer');
  
  // üîë Force re-render timestamp pro Krok 3
  const [step3Timestamp, setStep3Timestamp] = useState(Date.now());
  
  // VPC data
  const [jobs, setJobs] = useState<VPCItem[]>([]);
  const [pains, setPains] = useState<VPCItem[]>([]);
  const [gains, setGains] = useState<VPCItem[]>([]);
  const [products, setProducts] = useState<ValueMapItem[]>([]);
  const [painRelievers, setPainRelievers] = useState<ValueMapItem[]>([]);
  const [gainCreators, setGainCreators] = useState<ValueMapItem[]>([]);
  
  const [isLoading, setIsLoading] = useState(true);
  
  // üéØ Tracker jestli u≈æivatel u≈æ nƒõco p≈ôesunul (pak teprve uk√°zat priority)
  const [hasUserSorted, setHasUserSorted] = useState(false);
  
  // üìä Celkov√Ω poƒçet respondent≈Ø pro prioritizaci
  const [totalRespondents, setTotalRespondents] = useState(10);
  
  // üìä Dostupn√© segmenty a hodnoty pro dropdown
  const [availableSegments, setAvailableSegments] = useState<{text: string; color: string}[]>([]);
  const [availableValues, setAvailableValues] = useState<{text: string; color: string}[]>([]);
  const [localSelectedSegment, setLocalSelectedSegment] = useState(selectedSegment || '');
  const [localSelectedValue, setLocalSelectedValue] = useState('');
  
  // üîç Tracker pro zji≈°tƒõn√≠ zmƒõny segmentu/hodnoty (pro maz√°n√≠ mappings)
  const [lastLoadedSegment, setLastLoadedSegment] = useState<string>('');
  const [lastLoadedValue, setLastLoadedValue] = useState<string>('');
  
  // üîó INTERAKTIVN√ç MAPOV√ÅN√ç - kter√© ≈ôe≈°en√≠ pokr√Ωv√° kter√© priority
  const [painRelieverMappings, setPainRelieverMappings] = useState<Record<string, string[]>>({});
  const [gainCreatorMappings, setGainCreatorMappings] = useState<Record<string, string[]>>({});
  const [productMappings, setProductMappings] = useState<Record<string, string[]>>({});
  
  // üé® COLLAPSE state pro kompaktn√≠ UI
  const [expandedProducts, setExpandedProducts] = useState<Set<number>>(new Set());
  const [expandedPainRelievers, setExpandedPainRelievers] = useState<Set<number>>(new Set());
  const [expandedGainCreators, setExpandedGainCreators] = useState<Set<number>>(new Set());
  
  // üìñ Dynamick√Ω guide podle segmentu
  const guide = getGuideForSegment(localSelectedSegment || selectedSegment || 'v√°≈° segment');
  
  // üìç Ref pro scroll na navigation tlaƒç√≠tka
  const navigationRef = useRef<HTMLDivElement>(null);
  
  // üìç Ref pro scroll pozici
  const contentRef = useRef<HTMLDivElement>(null);
  
  // üíæ Auto-save timer
  const saveTimerRef = useRef<NodeJS.Timeout | null>(null);
  
  // üíæ Save FIT Validator progress
  const saveFitProgress = async (customJobs?: VPCItem[], customPains?: VPCItem[], customGains?: VPCItem[]) => {
    if (!userId) return;
    
    const segmentToUse = localSelectedSegment || selectedSegment;
    if (!segmentToUse) return;
    
    // Pou≈æij custom data pokud jsou poskytnut√© (po smaz√°n√≠), jinak pou≈æij state
    const jobsToSave = customJobs || jobs;
    const painsToSave = customPains || pains;
    const gainsToSave = customGains || gains;
    
    try {
      // üéØ SPOƒå√çTEJ FIT SCORE (stejn√° logika jako v useMemo fitScoreData)
      // Top 3 items podle percentage
      const topJobsToSave = jobsToSave
        .filter(j => (j.percentage || 0) > 0)
        .sort((a, b) => (b.percentage || 0) - (a.percentage || 0))
        .slice(0, 3);
      
      const topPainsToSave = painsToSave
        .filter(p => (p.percentage || 0) > 0)
        .sort((a, b) => (b.percentage || 0) - (a.percentage || 0))
        .slice(0, 3);
      
      const topGainsToSave = gainsToSave
        .filter(g => (g.percentage || 0) > 0)
        .sort((a, b) => (b.percentage || 0) - (a.percentage || 0))
        .slice(0, 3);
      
      // Zjisti kolik z top items m√° mapov√°n√≠
      const coveredPainIds = new Set<string>();
      const coveredGainIds = new Set<string>();
      const coveredJobIds = new Set<string>();
      
      Object.values(painRelieverMappings).forEach(painIds => {
        painIds.forEach(id => coveredPainIds.add(id));
      });
      
      Object.values(gainCreatorMappings).forEach(gainIds => {
        gainIds.forEach(id => coveredGainIds.add(id));
      });
      
      Object.values(productMappings).forEach(jobIds => {
        jobIds.forEach(id => coveredJobIds.add(id));
      });
      
      const coveredPainsCount = topPainsToSave.filter(p => coveredPainIds.has(p.id)).length;
      const coveredGainsCount = topGainsToSave.filter(g => coveredGainIds.has(g.id)).length;
      const coveredJobsCount = topJobsToSave.filter(j => coveredJobIds.has(j.id)).length;
      
      // V√Ωpoƒçet FIT Score
      let totalWeight = 0;
      let achievedScore = 0;
      
      if (topPainsToSave.length > 0) {
        totalWeight += 40;
        achievedScore += (coveredPainsCount / topPainsToSave.length) * 40;
      }
      if (topGainsToSave.length > 0) {
        totalWeight += 40;
        achievedScore += (coveredGainsCount / topGainsToSave.length) * 40;
      }
      if (topJobsToSave.length > 0) {
        totalWeight += 20;
        achievedScore += (coveredJobsCount / topJobsToSave.length) * 20;
      }
      
      const calculatedFitScore = totalWeight > 0 ? Math.round((achievedScore / totalWeight) * 100) : 0;
      
      // P≈ôiprav data k ulo≈æen√≠
      const progressData = {
        totalRespondents,
        hasUserSorted,
        currentStep,
        lastSaved: new Date().toISOString(),
        fitScore: calculatedFitScore,
        jobs: jobsToSave.map(j => ({ 
          id: j.id,
          text: j.text, 
          count: j.count || 0, 
          percentage: j.percentage || 0, 
          priority: j.priority || 0 
        })),
        pains: painsToSave.map(p => ({ 
          id: p.id,
          text: p.text, 
          count: p.count || 0, 
          percentage: p.percentage || 0, 
          priority: p.priority || 0 
        })),
        gains: gainsToSave.map(g => ({ 
          id: g.id,
          text: g.text, 
          count: g.count || 0, 
          percentage: g.percentage || 0, 
          priority: g.priority || 0 
        })),
        painRelieverMappings,
        gainCreatorMappings,
        productMappings
      };
      
      // Najdi z√°znam pro tento segment
      const { data: existing, error: fetchError } = await supabase
        .from('value_proposition_canvas')
        .select('id')
        .eq('user_id', userId)
        .eq('segment_name', segmentToUse)
        .is('selected_value', null)
        .maybeSingle();
      
      if (fetchError && fetchError.code !== 'PGRST116') {
        throw fetchError;
      }
      
      if (existing) {
        // Update existuj√≠c√≠ z√°znam
        const { error: updateError } = await supabase
          .from('value_proposition_canvas')
          .update({ fit_validation_data: progressData })
          .eq('id', existing.id);
        
        if (updateError) throw updateError;
      }
    } catch (error) {
      console.error('‚ùå Error saving FIT progress:', error);
    }
  };
  
  // üíæ Debounced auto-save
  const debouncedSave = () => {
    if (saveTimerRef.current) {
      clearTimeout(saveTimerRef.current);
    }
    
    saveTimerRef.current = setTimeout(() => {
      saveFitProgress();
    }, 2000);
  };
  
  // üîÑ AUTO-SAVE kdy≈æ se zmƒõn√≠ mappings, jobs, pains, gains, nebo totalRespondents
  useEffect(() => {
    if (isLoading) return;
    
    debouncedSave();
    
    // üö® CLEANUP: Kdy≈æ se komponenta unmountuje ‚Üí OKAM≈ΩITƒö ulo≈æ (bez debounce)!
    return () => {
      if (saveTimerRef.current) {
        clearTimeout(saveTimerRef.current);
        saveFitProgress();
      }
    };
  }, [
    painRelieverMappings, 
    gainCreatorMappings, 
    productMappings,
    jobs,
    pains,
    gains,
    totalRespondents,
    hasUserSorted
  ]);
  
  // üéØ Auto-select hodnotu kdy≈æ je jen 1
  useEffect(() => {
    if (!localSelectedSegment || availableValues.length === 0) return;
    
    const segmentData = availableSegments.find(s => s.text === localSelectedSegment);
    if (!segmentData) return;
    
    const isBila = segmentData.color === '#d1d5db' || segmentData.color.toLowerCase() === 'white';
    const matchingValues = isBila 
      ? availableValues.filter(v => v.color === '#d1d5db' || v.color.toLowerCase() === 'white')
      : availableValues.filter(v => v.color === segmentData.color);
    
    // Pokud je jen 1 matching hodnota a nenÔøΩÔøΩ vybran√°, automaticky vyber
    if (matchingValues.length === 1 && !localSelectedValue) {
      setLocalSelectedValue(matchingValues[0].text);
      if (onValueChange) onValueChange(matchingValues[0].text);
    }
  }, [localSelectedSegment, availableValues, availableSegments]);

  // Load VPC data from Supabase
  const loadVPC = async () => {
    if (!userId) return;
    
    setIsLoading(true);
    
    try {
      const currentSegment = localSelectedSegment || selectedSegment;
      const currentValue = localSelectedValue;
      
      console.log('üîç FitValidatorV2 loading VPC:', { 
        userId, 
        currentSegment,
        currentValue,
        lastLoadedSegment,
        lastLoadedValue
      });
      
      // ‚úÖ Kdy≈æ se zmƒõn√≠ segment NEBO hodnota ‚Üí update trackery
      if (currentSegment !== lastLoadedSegment || currentValue !== lastLoadedValue) {
        console.log('üîÑ DETEKOV√ÅNA ZMƒöNA segmentu/hodnoty - naƒç√≠t√°m nov√° data z DB', {
          segmentChanged: currentSegment !== lastLoadedSegment,
          valueChanged: currentValue !== lastLoadedValue
        });
        
        // ‚úÖ D≈ÆLE≈ΩIT√â: NEMAZAT mappings! Naƒçtou se z DB n√≠≈æe (≈ô√°dek 728+)
        // Pokud v DB nejsou, nastav√≠ se na pr√°zdn√© (≈ô√°dek 799-801)
        
        // Ulo≈æ nov√© hodnoty
        setLastLoadedSegment(currentSegment);
        setLastLoadedValue(currentValue);
      }
      
      // ‚úÖ Naƒçti V≈†ECHNY z√°znamy pro dan√Ω segment (Customer Profile + Value Maps)
      let query = supabase
        .from('value_proposition_canvas')
        .select('*')
        .eq('user_id', userId);
      
      // Pokud je vybran√Ω segment, filtruj podle nƒõj
      const segmentToLoad = localSelectedSegment || selectedSegment;
      if (segmentToLoad && segmentToLoad !== '') {
        query = query.eq('segment_name', segmentToLoad);
      }
      
      const { data: allRecords, error } = await query;
      
      console.log('üìä VPC Data loaded:', { 
        allRecords,
        count: allRecords?.length,
        error
      });
      
      if (error) {
        console.error('Error loading VPC:', error);
        setJobs([]);
        setPains([]);
        setGains([]);
        setProducts([]);
        setPainRelievers([]);
        setGainCreators([]);
        return;
      }
      
      if (allRecords && allRecords.length > 0) {
        // ‚úÖ Najdi Customer Profile (selected_value je null)
        const customerProfile = allRecords.find(r => r.selected_value === null);
        
        // ‚úÖ Najdi Value Maps (selected_value nen√≠ null)
        const valueMaps = allRecords.filter(r => r.selected_value !== null);
        
        // üéØ Pokud je vybran√° hodnota, pou≈æij tu konkr√©tn√≠ Value Map
        let valueMap = null;
        if (localSelectedValue && localSelectedValue !== '') {
          valueMap = valueMaps.find(vm => vm.selected_value === localSelectedValue);
          console.log('üîç Looking for specific value:', { 
            localSelectedValue, 
            found: !!valueMap,
            availableMaps: valueMaps.map(vm => vm.selected_value)
          });
        } else {
          // Jinak pou≈æij prvn√≠
          valueMap = valueMaps.length > 0 ? valueMaps[0] : null;
        }
        
        console.log('üîç Separated data:', {
          customerProfile: !!customerProfile,
          valueMap: !!valueMap,
          selectedValue: valueMap?.selected_value,
          jobsCount: customerProfile?.jobs?.length || 0,
          painsCount: customerProfile?.pains?.length || 0,
          gainsCount: customerProfile?.gains?.length || 0,
          productsCount: valueMap?.products?.length || 0
        });
        
        // üíæ Naƒçti FIT validation progress (pokud existuje)
        const fitProgress = customerProfile?.fit_validation_data;
        
        // Convert arrays to VPCItem format
        let jobsData: VPCItem[];
        let painsData: VPCItem[];
        let gainsData: VPCItem[];
        
        if (fitProgress && fitProgress.jobs !== undefined) {
          
          jobsData = fitProgress.jobs.map((item: any, index: number) => {
            const textSlug = item.text.substring(0, 30).replace(/\s+/g, '-').toLowerCase();
            return {
              id: item.id || `job-${textSlug}-${index}`, // Pou≈æij ulo≈æen√© ID nebo vygeneruj z textu + indexu
              text: item.text,
              count: item.count || 0,
              percentage: item.percentage || 0,
              priority: item.priority !== undefined ? item.priority : index
            };
          });
          
          painsData = fitProgress.pains.map((item: any, index: number) => {
            const textSlug = item.text.substring(0, 30).replace(/\s+/g, '-').toLowerCase();
            return {
              id: item.id || `pain-${textSlug}-${index}`,
              text: item.text,
              count: item.count || 0,
              percentage: item.percentage || 0,
              priority: item.priority !== undefined ? item.priority : index
            };
          });
          
          gainsData = fitProgress.gains.map((item: any, index: number) => {
            const textSlug = item.text.substring(0, 30).replace(/\s+/g, '-').toLowerCase();
            return {
              id: item.id || `gain-${textSlug}-${index}`,
              text: item.text,
              count: item.count || 0,
              percentage: item.percentage || 0,
              priority: item.priority !== undefined ? item.priority : index
            };
          });
          
          // Naƒçti i ostatn√≠ ulo≈æen√° data
          if (fitProgress.totalRespondents) {
            setTotalRespondents(fitProgress.totalRespondents);
          }
          
          // ‚úÖ AUTOMATICKY DETEKUJ hasUserSorted podle dat!
          // Pokud maj√≠ alespo≈à jednu polo≈æku s count > 0, znamen√° to ≈æe u≈æ prioritizovali
          const hasAnyCount = jobsData.some(j => (j.count || 0) > 0) || 
                             painsData.some(p => (p.count || 0) > 0) || 
                             gainsData.some(g => (g.count || 0) > 0);
          
          if (hasAnyCount) {
            // Maj√≠ data s count > 0 ‚Üí automaticky aktivuj priority zobrazen√≠
            setHasUserSorted(true);
          } else if (fitProgress.hasUserSorted !== undefined) {
            // Nemaj√≠ count, ale ulo≈æen√° hodnota existuje ‚Üí pou≈æij ji
            setHasUserSorted(fitProgress.hasUserSorted);
          }
          
          if (fitProgress.currentStep) {
            setCurrentStep(fitProgress.currentStep);
          }
          // üîó Naƒçti mapov√°n√≠ pokud existuj√≠ (ale jen pro SOUƒåASN√ù segment!)
          // ‚úÖ D≈ÆLE≈ΩIT√â: Mappings jsou v≈ædy pro konkr√©tn√≠ segment, tak≈æe kdy≈æ loadujeme jin√Ω segment, nesm√≠me je naƒç√≠st!
          // Naƒçteme je jen pokud je currentStep >= 3 (FIT Validator)
          if (fitProgress.currentStep >= 3) {
            // ‚úÖ AUTOMATICK√Å DETEKCE ZMƒöN v Customer Profile!
            // Pokud se zmƒõnily Jobs/Pains/Gains, VYMA≈Ω mappings (jsou neplatn√©!)
            const oldJobTexts = (fitProgress.jobs || []).map((j: any) => j.text).sort();
            const newJobTexts = jobsData.map(j => j.text).sort();
            const jobsChanged = JSON.stringify(oldJobTexts) !== JSON.stringify(newJobTexts);
            
            const oldPainTexts = (fitProgress.pains || []).map((p: any) => p.text).sort();
            const newPainTexts = painsData.map(p => p.text).sort();
            const painsChanged = JSON.stringify(oldPainTexts) !== JSON.stringify(newPainTexts);
            
            const oldGainTexts = (fitProgress.gains || []).map((g: any) => g.text).sort();
            const newGainTexts = gainsData.map(g => g.text).sort();
            const gainsChanged = JSON.stringify(oldGainTexts) !== JSON.stringify(newGainTexts);
            
            if (jobsChanged || painsChanged || gainsChanged) {
              console.log('üîÑ DETEKOV√ÅNA ZMƒöNA v Customer Profile!', {
                jobsChanged: jobsChanged ? `${oldJobTexts.length} ‚Üí ${newJobTexts.length}` : false,
                painsChanged: painsChanged ? `${oldPainTexts.length} ‚Üí ${newPainTexts.length}` : false,
                gainsChanged: gainsChanged ? `${oldGainTexts.length} ‚Üí ${newGainTexts.length}` : false
              });
              
              // Vyma≈æ mappings (jsou neplatn√©!)
              setPainRelieverMappings({});
              setGainCreatorMappings({});
              setProductMappings({});
              
              // Toast notifikace
              toast.info('üîÑ Detekov√°na zmƒõna v Customer Profile - FIT propojen√≠ byla resetov√°na');
              
              // Neskladuj mappings - p≈ôeskoƒç naƒç√≠t√°n√≠!
              // ALE: Zachovej prioritizaci (jobs, pains, gains s %)!
            } else {
              // ≈Ω√°dn√° zmƒõna ‚Üí norm√°lnƒõ naƒçti mappings
              // ‚ö†Ô∏è D≈ÆLE≈ΩIT√â: Star√° mappings pou≈æ√≠vaj√≠ star√° ID (job-0, job-1...)
              // Mus√≠me je p≈ôegenerovat aby matchovala NOV√Å ID zalo≈æen√° na textu!
              
              // üîÑ Vytvo≈ô lookup tabulku: star√Ω ID ‚Üí nov√Ω ID
              const oldToNewJobIds: Record<string, string> = {};
              if (fitProgress.jobs) {
                fitProgress.jobs.forEach((oldJob: any, index: number) => {
                  const oldId = oldJob.id || `job-${index}`;
                  const newId = jobsData.find(j => j.text === oldJob.text)?.id;
                  if (newId) {
                    oldToNewJobIds[oldId] = newId;
                  }
                });
              }
              
              const oldToNewPainIds: Record<string, string> = {};
              if (fitProgress.pains) {
                fitProgress.pains.forEach((oldPain: any, index: number) => {
                  const oldId = oldPain.id || `pain-${index}`;
                  const newId = painsData.find(p => p.text === oldPain.text)?.id;
                  if (newId) {
                    oldToNewPainIds[oldId] = newId;
                  }
                });
              }
              
              const oldToNewGainIds: Record<string, string> = {};
              if (fitProgress.gains) {
                fitProgress.gains.forEach((oldGain: any, index: number) => {
                  const oldId = oldGain.id || `gain-${index}`;
                  const newId = gainsData.find(g => g.text === oldGain.text)?.id;
                  if (newId) {
                    oldToNewGainIds[oldId] = newId;
                  }
                });
              }
              
              console.log('üîÑ ID Migration:', { oldToNewJobIds, oldToNewPainIds, oldToNewGainIds });
              
              // üîÑ P≈ôegeneruj mappings s nov√Ωmi ID
              if (fitProgress.painRelieverMappings) {
                const migratedMappings: Record<string, string[]> = {};
                Object.entries(fitProgress.painRelieverMappings).forEach(([reliever, oldPainIds]) => {
                  migratedMappings[reliever] = (oldPainIds as string[])
                    .map(oldId => oldToNewPainIds[oldId] || oldId)
                    .filter(id => painsData.some(p => p.id === id)); // Odstra≈à neexistuj√≠c√≠ ID
                });
                setPainRelieverMappings(migratedMappings);
              }
              
              if (fitProgress.gainCreatorMappings) {
                const migratedMappings: Record<string, string[]> = {};
                Object.entries(fitProgress.gainCreatorMappings).forEach(([creator, oldGainIds]) => {
                  migratedMappings[creator] = (oldGainIds as string[])
                    .map(oldId => oldToNewGainIds[oldId] || oldId)
                    .filter(id => gainsData.some(g => g.id === id));
                });
                setGainCreatorMappings(migratedMappings);
              }
              
              if (fitProgress.productMappings) {
                const migratedMappings: Record<string, string[]> = {};
                Object.entries(fitProgress.productMappings).forEach(([product, oldJobIds]) => {
                  migratedMappings[product] = (oldJobIds as string[])
                    .map(oldId => oldToNewJobIds[oldId] || oldId)
                    .filter(id => jobsData.some(j => j.id === id));
                });
                setProductMappings(migratedMappings);
              }
            }
          } else {
            setPainRelieverMappings({});
            setGainCreatorMappings({});
            setProductMappings({});
          }
        } else {
          
          // ‚úÖ Generuj PERZISTENTN√ç ID zalo≈æen√© na textu + indexu (pro unik√°tnost!)
          jobsData = (customerProfile?.jobs || []).map((item: any, index: number) => {
            const text = typeof item === 'string' ? item : item.text;
            const textSlug = text.substring(0, 30).replace(/\s+/g, '-').toLowerCase();
            
            // ‚úÖ NAƒåTI count/percentage z fitProgress POKUD EXISTUJ√ç!
            const savedJob = fitProgress?.jobs?.find((j: any) => j.text === text);
            
            return {
              id: item.id || `job-${textSlug}-${index}`, // Index zajist√≠ unik√°tnost i pro stejn√Ω text
              text,
              count: savedJob?.count || 0,
              percentage: savedJob?.percentage || 0,
              priority: savedJob?.priority !== undefined ? savedJob.priority : index
            };
          });
          
          painsData = (customerProfile?.pains || []).map((item: any, index: number) => {
            const text = typeof item === 'string' ? item : item.text;
            const textSlug = text.substring(0, 30).replace(/\s+/g, '-').toLowerCase();
            
            // ‚úÖ NAƒåTI count/percentage z fitProgress POKUD EXISTUJ√ç!
            const savedPain = fitProgress?.pains?.find((p: any) => p.text === text);
            
            return {
              id: item.id || `pain-${textSlug}-${index}`,
              text,
              count: savedPain?.count || 0,
              percentage: savedPain?.percentage || 0,
              priority: savedPain?.priority !== undefined ? savedPain.priority : index
            };
          });
          
          gainsData = (customerProfile?.gains || []).map((item: any, index: number) => {
            const text = typeof item === 'string' ? item : item.text;
            const textSlug = text.substring(0, 30).replace(/\s+/g, '-').toLowerCase();
            
            // ‚úÖ NAƒåTI count/percentage z fitProgress POKUD EXISTUJ√ç!
            const savedGain = fitProgress?.gains?.find((g: any) => g.text === text);
            
            return {
              id: item.id || `gain-${textSlug}-${index}`,
              text,
              count: savedGain?.count || 0,
              percentage: savedGain?.percentage || 0,
              priority: savedGain?.priority !== undefined ? savedGain.priority : index
            };
          });
        }
        
        setJobs(jobsData);
        setPains(painsData);
        setGains(gainsData);
        
        // Pokud m√°me Value Map, naƒçti produkty atd. + NORMALIZUJ!
        if (valueMap) {
          // ‚úÖ NORMALIZACE: P≈ôeveƒè stringy na objekty s barvou!
          const normalizeColor = (color: string | undefined): string => {
            if (!color) return '#f59e0b';
            if (color.startsWith('#')) return color;
            const colorMap: Record<string, string> = {
              'blue': '#3b82f6',
              'green': '#22c55e',
              'yellow': '#eab308',
              'red': '#ef4444',
              'purple': '#8b5cf6',
              'pink': '#ec4899',
              'orange': '#f59e0b',
              'gray': '#6b7280'
            };
            return colorMap[color.toLowerCase()] || '#f59e0b';
          };
          
          const normalizeItems = (items: any[], defaultColor: string) => {
            if (!items) return [];
            return items.map(item => {
              if (typeof item === 'string') {
                // Star√Ω form√°t - string ‚Üí p≈ôidej default barvu
                console.log('üîÑ FIT: Normalizing string to object:', item);
                return { text: item, color: defaultColor };
              } else if (item && typeof item === 'object') {
                // Nov√Ω form√°t - objekt ‚Üí normalizuj barvu
                return { text: item.text, color: normalizeColor(item.color) };
              }
              return { text: String(item), color: defaultColor };
            });
          };
          
          setProducts(normalizeItems(valueMap.products || [], '#f59e0b'));
          setPainRelievers(normalizeItems(valueMap.pain_relievers || [], '#8b5cf6'));
          setGainCreators(normalizeItems(valueMap.gain_creators || [], '#22c55e'));
        } else {
          setProducts([]);
          setPainRelievers([]);
          setGainCreators([]);
        }
      } else {
        // ≈Ω√°dn√° data
        setJobs([]);
        setPains([]);
        setGains([]);
        setProducts([]);
        setPainRelievers([]);
        setGainCreators([]);
      }
    } catch (err) {
      console.error('Error loading VPC:', err);
    } finally {
      setIsLoading(false);
    }
  };

  // Naƒç√≠st dostupn√© segmenty a hodnoty
  useEffect(() => {
    loadAvailableOptions();
  }, [userId]);
  
  // ‚úÖ D≈ÆLE≈ΩIT√â: Reload VPC dat kdy≈æ se zmƒõn√≠ segment NEBO p≈ôi prvn√≠m mount!
  useEffect(() => {
    if (userId && localSelectedSegment) {
      loadVPC();
    }
  }, [localSelectedSegment, userId]); // ‚úÖ P≈ôid√°n userId pro reload p≈ôi prvn√≠m mount
  
  // üîÑ P≈ôepoƒç√≠tat % kdy≈æ se zmƒõn√≠ celkov√Ω poƒçet respondent≈Ø
  useEffect(() => {
    if (totalRespondents > 0) {
      // P≈ôepoƒç√≠tej Jobs
      setJobs(prev => prev.map(item => ({
        ...item,
        percentage: item.count ? Math.round((item.count / totalRespondents) * 100) : 0
      })));
      
      // P≈ôepoƒç√≠tej Pains
      setPains(prev => prev.map(item => ({
        ...item,
        percentage: item.count ? Math.round((item.count / totalRespondents) * 100) : 0
      })));
      
      // P≈ôepoƒç√≠tej Gains
      setGains(prev => prev.map(item => ({
        ...item,
        percentage: item.count ? Math.round((item.count / totalRespondents) * 100) : 0
      })));
    }
  }, [totalRespondents]);

  const loadAvailableOptions = async () => {
    if (!userId) return;
    
    try {
      // ‚úÖ Normalizace barev - stejn√° jako p≈ôi naƒç√≠t√°n√≠ products/painRelievers
      const normalizeColor = (color: string): string => {
        const colorMap: Record<string, string> = {
          'blue': '#3b82f6',
          'green': '#22c55e',
          'yellow': '#eab308',
          'red': '#ef4444',
          'purple': '#8b5cf6',
          'pink': '#ec4899',
          'orange': '#f59e0b',
          'white': '#d1d5db',
          'gray': '#6b7280'
        };
        
        if (color.startsWith('#')) return color;
        return colorMap[color.toLowerCase()] || '#f59e0b';
      };
      
      // Naƒçti segmenty
      const { data: segmentsData } = await supabase
        .from('user_canvas_data')
        .select('content')
        .eq('user_id', userId)
        .eq('section_key', 'segments')
        .maybeSingle();
      
      if (segmentsData?.content) {
        // ‚úÖ NORMALIZUJ BARVY segment≈Ø!
        const normalizedSegments = segmentsData.content.map((seg: any) => ({
          text: seg.text,
          color: normalizeColor(seg.color)
        }));
        
        setAvailableSegments(normalizedSegments);
        
        // Auto-select prvn√≠ segment pokud nen√≠ vybran√Ω
        if (!selectedSegment && normalizedSegments.length > 0) {
          const firstSegment = normalizedSegments[0].text;
          setLocalSelectedSegment(firstSegment);
          if (onSegmentChange) onSegmentChange(firstSegment);
        }
      }
      
      // Naƒçti hodnoty
      const { data: valuesData } = await supabase
        .from('user_canvas_data')
        .select('content')
        .eq('user_id', userId)
        .eq('section_key', 'value')
        .maybeSingle();
      
      if (valuesData?.content) {
        // ‚úÖ NORMALIZUJ BARVY hodnot!
        const normalizedValues = valuesData.content.map((val: any) => ({
          text: val.text,
          color: normalizeColor(val.color)
        }));
        
        setAvailableValues(normalizedValues);
      }
    } catch (err) {
      console.error('Error loading options:', err);
    }
  };

  useEffect(() => {
    loadVPC();
  }, [userId, selectedSegment, localSelectedSegment]);
  
  // üîÑ Reload VPC kdy≈æ se zmƒõn√≠ hodnota (naƒçte spr√°vnou Value Map)
  useEffect(() => {
    if (!isLoading && localSelectedValue) {
      loadVPC();
    }
  }, [localSelectedValue]);
  
  // üéØ Trigger auto-select po naƒçten√≠ dat
  useEffect(() => {
    if (!isLoading && availableSegments.length > 0 && availableValues.length > 0 && !localSelectedValue) {
      const currentSegment = localSelectedSegment || selectedSegment;
      const segmentData = availableSegments.find(s => s.text === currentSegment);
      
      if (segmentData) {
        const isBila = segmentData.color === '#d1d5db' || segmentData.color?.toLowerCase() === 'white';
        
        if (!isBila) {
          const matchingValue = availableValues.find(v => v.color === segmentData.color);
          if (matchingValue) {
            setLocalSelectedValue(matchingValue.text);
            if (onValueChange) onValueChange(matchingValue.text);
          }
        }
      }
    }
  }, [isLoading, availableSegments, availableValues]);
  
  // ‚ùå DISABLED - zp≈Øsobovalo probl√©my s renderingem
  // useEffect pro force reload byl odstranƒõn
  
  // üíæ Auto-save p≈ôi zmƒõnƒõ dat
  useEffect(() => {
    // Nespou≈°tƒõj save kdy≈æ se teprve naƒç√≠taj√≠ data
    if (isLoading) return;
    
    // Save jen kdy≈æ m√° user nƒõjak√° data
    if (jobs.length > 0 || pains.length > 0 || gains.length > 0) {
      debouncedSave();
    }
    
    // Cleanup timer p≈ôi unmount
    return () => {
      if (saveTimerRef.current) {
        clearTimeout(saveTimerRef.current);
      }
    };
  }, [jobs, pains, gains, totalRespondents, hasUserSorted, currentStep, isLoading]);
  
  // üíæ Auto-save p≈ôi zmƒõnƒõ mapov√°n√≠
  useEffect(() => {
    if (isLoading) return;
    
    // Save kdy≈æ se zmƒõn√≠ mapov√°n√≠
    debouncedSave();
  }, [painRelieverMappings, gainCreatorMappings, productMappings, isLoading]);
  
  // üéØ Auto-select hodnotu po naƒçten√≠ segmentu a values
  useEffect(() => {
    if (isLoading) return;
    if (availableSegments.length === 0 || availableValues.length === 0) return;
    
    const currentSegment = localSelectedSegment || selectedSegment;
    const segmentData = availableSegments.find(s => s.text === currentSegment);
    
    if (segmentData) {
      const isBila = segmentData.color === '#d1d5db' || segmentData.color?.toLowerCase() === 'white';
      
      if (!isBila) {
        const matchingValue = availableValues.find(v => v.color === segmentData.color);
        
        if (matchingValue) {
          setLocalSelectedValue(matchingValue.text);
          if (onValueChange) onValueChange(matchingValue.text);
        }
      }
    }
  }, [availableSegments, availableValues, localSelectedSegment, selectedSegment, isLoading]);

  // Handle segment change
  const handleSegmentChange = (newSegment: string) => {
    setLocalSelectedSegment(newSegment);
    if (onSegmentChange) onSegmentChange(newSegment);
    
    // ‚úÖ D≈ÆLE≈ΩIT√â: NEMAZAT mappings ruƒçnƒõ! Naƒçtou se automaticky v loadVPC()
    // kter√© se zavol√° v useEffect p≈ôi zmƒõnƒõ localSelectedSegment
    
    // Reset sorted state when changing segment
    setHasUserSorted(false);
    
    // ‚úÖ ≈Ω√°dn√Ω automatick√Ω scroll - u≈æivatel si p≈ôeƒçte obsah s√°m
    
    // üé® Inteligentn√≠ logika pro hodnoty
    const segmentData = availableSegments.find(s => s.text === newSegment);
    if (segmentData) {
      // ‚úÖ NOV√Å LOGIKA: Ka≈æd√Ω segment m√° vlastn√≠ barvu
      // Najdi V≈†ECHNY hodnoty se stejnou barvou
      const matchingValues = availableValues.filter(v => v.color === segmentData.color);
      
      if (matchingValues.length === 1) {
        // P≈ôesnƒõ 1 hodnota ‚Üí automaticky vyber
        setLocalSelectedValue(matchingValues[0].text);
        if (onValueChange) onValueChange(matchingValues[0].text);
      } else if (matchingValues.length > 1) {
        // V√≠ce hodnot se stejnou barvou ‚Üí zobraz dropdown pro v√Ωbƒõr
        setLocalSelectedValue('');
      } else {
        // 0 hodnot se stejnou barvou ‚Üí mo≈æn√° chyba v datech, nech pr√°zdn√©
        setLocalSelectedValue('');
      }
    }
  };
  
  // Handle value change
  const handleValueChange = (newValue: string) => {
    setLocalSelectedValue(newValue);
    if (onValueChange) onValueChange(newValue);
    setHasUserSorted(false);
    
    // üîÑ Reload VPC data po zmƒõnƒõ hodnoty (naƒçte spr√°vnou Value Map)
    if (newValue) {
      loadVPC();
    }
  };

  // Update count pro konkr√©tn√≠ polo≈æku
  const updateItemCount = (category: 'jobs' | 'pains' | 'gains', index: number, count: number) => {
    const setter = category === 'jobs' ? setJobs : category === 'pains' ? setPains : setGains;
    
    // üéØ U≈æivatel zaƒçal zad√°vat data - aktivuj prioritn√≠ labely
    setHasUserSorted(true);
    
    setter((prevItems) => {
      const newItems = prevItems.map((item, i) => {
        if (i === index) {
          const percentage = totalRespondents > 0 ? Math.round((count / totalRespondents) * 100) : 0;
          return { ...item, count, percentage };
        }
        return item;
      });
      
      // üîÑ Automaticky se≈ôaƒè podle percentage (nejvy≈°≈°√≠ naho≈ôe)
      return newItems
        .sort((a, b) => (b.percentage || 0) - (a.percentage || 0))
        .map((item, i) => ({ ...item, priority: i }));
    });
    
    // ‚úÖ Auto-save se spust√≠ automaticky p≈ôes useEffect dependency!
  };
  
  // üóëÔ∏è Smazat polo≈æku (z UI i DB)
  const deleteItem = async (category: 'jobs' | 'pains' | 'gains', id: string, text: string) => {
    if (!confirm(`Opravdu smazat "${text}"? Tato akce je nevratn√°.`)) return;
    
    try {
      const segmentToUse = localSelectedSegment || selectedSegment;
      
      // Naƒçti existuj√≠c√≠ z√°znam
      const { data: existing, error: fetchError } = await supabase
        .from('value_proposition_canvas')
        .select('*')
        .eq('user_id', userId)
        .eq('segment_name', segmentToUse)
        .is('selected_value', null)
        .maybeSingle();
      
      if (fetchError) throw fetchError;
      if (!existing) {
        alert('Z√°znam nenalezen.');
        return;
      }
      
      // Odstra≈à polo≈æku z JSONB pole
      const fieldName = category; // 'jobs', 'pains', 'gains'
      const existingItems = existing[fieldName] || [];
      const newItems = existingItems.filter((item: any) => {
        const itemText = typeof item === 'string' ? item : item.text;
        return itemText !== text;
      });
      
      // Update v DB
      const { error: updateError } = await supabase
        .from('value_proposition_canvas')
        .update({ [fieldName]: newItems })
        .eq('id', existing.id);
      
      if (updateError) throw updateError;
      
      // Sma≈æ z lok√°ln√≠ho state
      const setter = category === 'jobs' ? setJobs : category === 'pains' ? setPains : setGains;
      const currentData = category === 'jobs' ? jobs : category === 'pains' ? pains : gains;
      const newData = currentData.filter(item => item.text !== text);
      
      setter(newData);
      
      // üîÑ Po smaz√°n√≠ ulo≈æ FIT progress se SPR√ÅVN√ùMI daty OKAM≈ΩITƒö
      // P≈ôedej nov√° data p≈ô√≠mo do saveFitProgress m√≠sto ƒçek√°n√≠ na state update!
      if (category === 'jobs') {
        await saveFitProgress(newData, pains, gains);
      } else if (category === 'pains') {
        await saveFitProgress(jobs, newData, gains);
      } else {
        await saveFitProgress(jobs, pains, newData);
      }
      
      console.log(`‚úÖ Smaz√°no: ${text}`);
    } catch (error) {
      console.error('Error deleting item:', error);
      alert('Chyba p≈ôi maz√°n√≠. Zkuste to znovu.');
    }
  };
  
  // ‚ûï P≈ôidat novou polo≈æku (do UI i DB)
  const addItem = async (category: 'jobs' | 'pains' | 'gains', text: string) => {
    if (!text.trim()) return;
    
    try {
      // Urƒçit typ podle kategorie
      const zone = category === 'jobs' ? 'jobs' 
                 : category === 'pains' ? 'pains' 
                 : 'gains';
      
      const type = category === 'jobs' ? 'job' 
                 : category === 'pains' ? 'pain' 
                 : 'gain';
      
      // üéØ Urƒçit spr√°vnou hodnotu podle segmentu
      const currentSegmentData = availableSegments.find(s => s.text === (localSelectedSegment || selectedSegment));
      const isBilySegment = currentSegmentData?.color === '#d1d5db' || currentSegmentData?.color?.toLowerCase() === 'white';
      
      let valueToUse = 'B√≠l√°'; // Default
      
      if (isBilySegment) {
        // Pro b√≠l√Ω segment pou≈æij vybranou hodnotu nebo prvn√≠ b√≠lou
        valueToUse = localSelectedValue || availableValues.find(v => v.color === '#d1d5db')?.text || 'B√≠l√°';
      } else if (currentSegmentData) {
        // Pro barevn√Ω segment pou≈æij hodnotu stejn√© barvy
        valueToUse = availableValues.find(v => v.color === currentSegmentData.color)?.text || localSelectedValue || 'B√≠l√°';
      }
      
      const segmentToUse = localSelectedSegment || selectedSegment;
      
      if (!segmentToUse) {
        alert('Chyba: Nen√≠ vybr√°n ≈æ√°dn√Ω segment. Vyberte segment naho≈ôe.');
        return false;
      }
      
      console.log('üîç Adding item:', { 
        category, 
        text, 
        segment: segmentToUse,
        value: valueToUse,
        userId 
      });
      
      // P≈ôidej do DB - pou≈æ√≠v√°me STAR√ù SYST√âM s JSONB arrays
      // Mus√≠me naj√≠t existuj√≠c√≠ z√°znam a update ho
      const { data: existing, error: fetchError } = await supabase
        .from('value_proposition_canvas')
        .select('*')
        .eq('user_id', userId)
        .eq('segment_name', segmentToUse)
        .is('selected_value', null)
        .maybeSingle();
      
      if (fetchError && fetchError.code !== 'PGRST116') {
        console.error('‚ùå Fetch error:', fetchError);
        throw fetchError;
      }
      
      // P≈ôidej polo≈æku do spr√°vn√©ho JSONB pole
      const fieldName = category; // 'jobs', 'pains', 'gains'
      const existingItems = existing?.[fieldName] || [];
      
      // ‚úÖ CHECK DUPLICATES!
      const duplicate = existingItems.some((item: any) => {
        const itemText = typeof item === 'string' ? item : item?.text;
        return itemText?.toLowerCase() === text.trim().toLowerCase();
      });
      
      if (duplicate) {
        console.log('‚ùå DUPLICATE in DB!');
        toast.error('‚ùå Tato polo≈æka ji≈æ existuje!');
        return false;
      }
      
      const newItems = [...existingItems, { text: text.trim(), color: currentSegmentData?.color || '#d1d5db' }];
      
      if (existing) {
        // Update existuj√≠c√≠ z√°znam
        const { error: updateError } = await supabase
          .from('value_proposition_canvas')
          .update({ [fieldName]: newItems })
          .eq('id', existing.id);
        
        if (updateError) {
          console.error('‚ùå Update error:', updateError);
          throw updateError;
        }
      } else {
        // Vytvo≈ô nov√Ω z√°znam
        const { error: insertError } = await supabase
          .from('value_proposition_canvas')
          .insert({
            user_id: userId,
            segment_name: segmentToUse,
            selected_value: null,
            [fieldName]: newItems
          });
        
        if (insertError) {
          console.error('‚ùå Insert error:', insertError);
          throw insertError;
        }
      }
      
      // P≈ôidej do lok√°ln√≠ho state
      const data = { id: `${category}-${Date.now()}`, text: text.trim() };
      const setter = category === 'jobs' ? setJobs : category === 'pains' ? setPains : setGains;
      setter(prev => [...prev, {
        id: data.id,
        text: text.trim(),
        count: 0,
        percentage: 0,
        priority: prev.length
      }]);
      
      console.log(`‚úÖ P≈ôid√°no: ${text}`);
      return true;
    } catch (error) {
      console.error('Error adding item:', error);
      alert(`Chyba p≈ôi p≈ôid√°v√°n√≠: ${error.message || 'Zkuste to znovu.'}`);
      return false;
    }
  };

  // ‚úÖ ADD VALUE MAP ITEM (Products, Pain Relievers, Gain Creators)
  const addValueMapItem = async (category: 'products' | 'painRelievers' | 'gainCreators', text: string): Promise<boolean> => {
    if (!text.trim()) return false;
    
    try {
      const segmentToUse = localSelectedSegment || selectedSegment;
      const valueToUse = localSelectedValue;
      
      if (!segmentToUse || !valueToUse) {
        toast.error('‚ö†Ô∏è Vyberte segment a hodnotu!');
        return false;
      }
      
      console.log('üîç DEBUG START:', {
        segmentToUse,
        valueToUse,
        availableValues,
        availableSegments
      });
      
      // ‚úÖ D≈ÆLE≈ΩIT√â: Normalize color helper
      const colorMap: Record<string, string> = {
        'blue': '#3b82f6',
        'green': '#22c55e',
        'yellow': '#eab308',
        'red': '#ef4444',
        'purple': '#8b5cf6',
        'pink': '#ec4899',
        'orange': '#f59e0b',
        'gray': '#6b7280'
      };
      
      const normalizeColor = (color: string | undefined): string => {
        if (!color) return '#f59e0b';
        if (color.startsWith('#')) return color;
        return colorMap[color.toLowerCase()] || '#f59e0b';
      };
      
      // Get value color (try hodnota, fallback na segment!)
      const valueObj = availableValues.find(v => v.text === valueToUse);
      let valueColor = valueObj?.color;
      
      // ‚úÖ FALLBACK: Pokud hodnota nem√° barvu, pou≈æij SEGMENT barvu!
      if (!valueColor) {
        console.warn('‚ö†Ô∏è Hodnota nem√° barvu, fallback na segment barvu');
        const segmentObj = availableSegments.find(s => s.text === segmentToUse);
        valueColor = segmentObj?.color;
        console.log('üé® Using SEGMENT color:', valueColor, 'from segment:', segmentToUse);
      }
      
      valueColor = normalizeColor(valueColor);
      
      console.log('üé® Final color:', valueColor, 'for value:', valueToUse);
      
      // Check duplicates (fix: item m≈Ø≈æe b√Ωt string nebo object!)
      const existingItems = category === 'products' ? products : category === 'painRelievers' ? painRelievers : gainCreators;
      if (existingItems.some(item => {
        const itemText = typeof item === 'string' ? item : item?.text;
        return itemText?.toLowerCase() === text.trim().toLowerCase();
      })) {
        toast.error('‚ùå Tato polo≈æka ji≈æ existuje!', {
          description: 'Pou≈æijte jin√Ω text nebo upravte existuj√≠c√≠ polo≈æku.'
        });
        return false;
      }
      
      // ‚úÖ D≈ÆLE≈ΩIT√â: Form√°t mus√≠ odpov√≠dat VPCValueMapSquare!
      // Ukl√°d√°me jako OBJECT s text + color
      const newItemObject = { text: text.trim(), color: valueColor };
      
      // Add to local state (jako OBJECT! ne string)
      const setter = category === 'products' ? setProducts : category === 'painRelievers' ? setPainRelievers : setGainCreators;
      setter(prev => [...prev, newItemObject]);
      
      // Save to DB (jako OBJECT array pro konzistenci s Lekce 2!)
      const fieldName = category === 'products' ? 'products' : category === 'painRelievers' ? 'pain_relievers' : 'gain_creators';
      
      // Naƒçti aktu√°ln√≠ data z DB
      const { data: currentData } = await supabase
        .from('value_proposition_canvas')
        .select(fieldName)
        .eq('user_id', userId)
        .eq('segment_name', segmentToUse)
        .eq('selected_value', valueToUse)
        .maybeSingle();
      
      const currentItems = currentData?.[fieldName] || [];
      const newItems = [...currentItems, newItemObject];
      
      const { error } = await supabase
        .from('value_proposition_canvas')
        .update({ [fieldName]: newItems })
        .eq('user_id', userId)
        .eq('segment_name', segmentToUse)
        .eq('selected_value', valueToUse);
      
      if (error) throw error;
      
      console.log(`‚úÖ ${category} p≈ôid√°no:`, text);
      return true;
    } catch (error) {
      console.error('Error adding value map item:', error);
      // ‚ùå REMOVED DUPLICATE TOAST - u≈æ je v duplicate checku v√Ω≈°e!
      // toast.error('‚ùå Chyba p≈ôi p≈ôid√°v√°n√≠!');
      return false;
    }
  };
  
  // ‚úÖ DELETE VALUE MAP ITEM
  const deleteValueMapItem = async (category: 'products' | 'painRelievers' | 'gainCreators', index: number) => {
    try {
      const segmentToUse = localSelectedSegment || selectedSegment;
      const valueToUse = localSelectedValue;
      
      if (!segmentToUse || !valueToUse) return;
      
      // ‚úÖ Normalize color helper
      const colorMap: Record<string, string> = {
        'blue': '#3b82f6',
        'green': '#22c55e',
        'yellow': '#eab308',
        'red': '#ef4444',
        'purple': '#8b5cf6',
        'pink': '#ec4899',
        'orange': '#f59e0b',
        'gray': '#6b7280'
      };
      
      const normalizeColor = (color: string | undefined): string => {
        if (!color) return '#f59e0b';
        if (color.startsWith('#')) return color;
        return colorMap[color.toLowerCase()] || '#f59e0b';
      };
      
      // Get value color (fallback na segment!)
      const valueObj = availableValues.find(v => v.text === valueToUse);
      let valueColor = valueObj?.color;
      
      // ‚úÖ FALLBACK na segment barvu
      if (!valueColor) {
        const segmentObj = availableSegments.find(s => s.text === segmentToUse);
        valueColor = segmentObj?.color;
      }
      
      valueColor = normalizeColor(valueColor);
      
      // Remove from local state (strings)
      const existingItems = category === 'products' ? products : category === 'painRelievers' ? painRelievers : gainCreators;
      const newStringItems = existingItems.filter((_, i) => i !== index);
      const setter = category === 'products' ? setProducts : category === 'painRelievers' ? setPainRelievers : setGainCreators;
      setter(newStringItems);
      
      // Save to DB (as objects!)
      const fieldName = category === 'products' ? 'products' : category === 'painRelievers' ? 'pain_relievers' : 'gain_creators';
      
      // Convert strings to objects for DB
      const newObjectItems = newStringItems.map(text => ({ text, color: valueColor }));
      
      const { error } = await supabase
        .from('value_proposition_canvas')
        .update({ [fieldName]: newObjectItems })
        .eq('user_id', userId)
        .eq('segment_name', segmentToUse)
        .eq('selected_value', valueToUse);
      
      if (error) throw error;
      
      console.log(`‚úÖ ${category} smaz√°no na indexu:`, index);
    } catch (error) {
      console.error('Error deleting value map item:', error);
      toast.error('‚ùå Chyba p≈ôi maz√°n√≠!');
    }
  };

  // Move item up/down (deprecated - pou≈æ√≠v√°me ƒç√≠seln√© hodnocen√≠)
  const moveItem = (category: 'jobs' | 'pains' | 'gains', index: number, direction: 'up' | 'down') => {
    const setter = category === 'jobs' ? setJobs : category === 'pains' ? setPains : setGains;
    const items = category === 'jobs' ? jobs : category === 'pains' ? pains : gains;
    
    const newIndex = direction === 'up' ? index - 1 : index + 1;
    if (newIndex < 0 || newIndex >= items.length) return;
    
    // üéØ U≈æivatel zaƒçal se≈ôazovat - aktivuj prioritn√≠ labely
    setHasUserSorted(true);
    
    setter((prevItems) => {
      const newItems = [...prevItems];
      const temp = newItems[index];
      newItems[index] = newItems[newIndex];
      newItems[newIndex] = temp;
      
      // Update priorities
      return newItems.map((item, i) => ({
        ...item,
        priority: i
      }));
    });
  };

  // Get top 3 items - JEN PRIORITIZOVAN√â (percentage > 0)
  const getTopItems = (items: VPCItem[], category: string = '') => {
    // ‚úÖ D≈ÆLE≈ΩIT√â: Nejd≈ô√≠v filtruj, pak SE≈òAƒé podle %!
    const validItems = items
      .filter(item => (item.percentage || 0) > 0)
      .sort((a, b) => (b.percentage || 0) - (a.percentage || 0)); // Nejvy≈°≈°√≠ prvn√≠
    
    if (validItems.length === 0) return [];
    if (validItems.length <= 3) {
      return validItems;
    }
    
    // üéØ SPECI√ÅLN√ç P≈ò√çPAD: Kdy≈æ maj√≠ V≈†ECHNY stejn√© % (nap≈ô. v≈°echny 10%)
    const firstPercentage = validItems[0]?.percentage || 0;
    const allSame = validItems.every(item => item.percentage === firstPercentage);
    
    if (allSame) {
      // Kdy≈æ jsou v≈°echny stejn√©, zobraz v≈°echny (nedƒõl√°me umƒõl√© "top 3")
      return validItems;
    }
    
    // ‚úÖ Vezmi P≈òESNƒö prvn√≠ch 3 (≈æ√°dn√© tie breakery!)
    const top3 = validItems.slice(0, 3);
    return top3;
  };

  // ‚úÖ REACTIVE FIT SCORE - p≈ôepoƒç√≠t√° se kdy≈æ se zmƒõn√≠ mappings!
  const fitScoreData = useMemo(() => {
    // Calculate top items
    const topJobs = getTopItems(jobs);
    const topPains = getTopItems(pains);
    const topGains = getTopItems(gains);
    
    const hasValidData = topJobs.length > 0 || topPains.length > 0 || topGains.length > 0;
    
    // ‚úÖ KONTROLA: M√°me v≈Øbec nƒõjak√° ≈ôe≈°en√≠?
    const hasAnySolutions = painRelievers.length > 0 || gainCreators.length > 0 || products.length > 0;
    
    let fitScore = 0;
    let coveredPainsCount = 0;
    let coveredGainsCount = 0;
    let coveredJobsCount = 0;
    
    if (hasValidData && hasAnySolutions) {
      // Pains: Zjisti unique pain IDs z mapping≈Ø
      const coveredPainIds = new Set<string>();
      Object.values(painRelieverMappings).forEach(painIds => {
        painIds.forEach(id => coveredPainIds.add(id));
      });
      coveredPainsCount = topPains.filter(p => coveredPainIds.has(p.id)).length;
      
      // Gains: Zjisti unique gain IDs z mapping≈Ø
      const coveredGainIds = new Set<string>();
      Object.values(gainCreatorMappings).forEach(gainIds => {
        gainIds.forEach(id => coveredGainIds.add(id));
      });
      coveredGainsCount = topGains.filter(g => coveredGainIds.has(g.id)).length;
      
      // Jobs: Zjisti unique job IDs z mapping≈Ø
      const coveredJobIds = new Set<string>();
      Object.values(productMappings).forEach(jobIds => {
        jobIds.forEach(id => coveredJobIds.add(id));
      });
      coveredJobsCount = topJobs.filter(j => coveredJobIds.has(j.id)).length;
      
      // V√Ωpoƒçet FIT Score podle % pokryt√≠
      // ‚ö†Ô∏è D≈ÆLE≈ΩIT√â: Pokud kategorie NEM√Å items, tak se P≈òESKOƒå√ç (nezapoƒç√≠t√° se do score)
      // Pokud m√° items ale NEM√Å mappings, tak se zapoƒç√≠t√° jako 0%
      let totalWeight = 0;
      let achievedScore = 0;
      
      if (topPains.length > 0) {
        totalWeight += 40;
        achievedScore += (coveredPainsCount / topPains.length) * 40;
      }
      if (topGains.length > 0) {
        totalWeight += 40;
        achievedScore += (coveredGainsCount / topGains.length) * 40;
      }
      if (topJobs.length > 0) {
        totalWeight += 20;
        achievedScore += (coveredJobsCount / topJobs.length) * 20;
      }
      
      // Normalizuj score na 100%
      fitScore = totalWeight > 0 ? Math.round((achievedScore / totalWeight) * 100) : 0;
      
      console.log('üîç FIT Score calc:', {
        totalWeight,
        achievedScore,
        normalizedScore: totalWeight > 0 ? (achievedScore / totalWeight) * 100 : 0,
        hasAnySolutions: `painRelievers: ${painRelievers.length}, gainCreators: ${gainCreators.length}, products: ${products.length}`,
        topPains: topPains.map(p => ({ id: p.id, text: p.text.substring(0, 30) })),
        topGains: topGains.map(g => ({ id: g.id, text: g.text.substring(0, 30) })),
        topJobs: topJobs.map(j => ({ id: j.id, text: j.text.substring(0, 30) })),
        painRelieverMappings,
        gainCreatorMappings,
        productMappings,
        coveredPainIds: Array.from(coveredPainIds),
        coveredGainIds: Array.from(coveredGainIds),
        coveredJobIds: Array.from(coveredJobIds),
        coveredPainsCount,
        coveredGainsCount,
        coveredJobsCount,
        fitScore
      });
      
      // üîç Detail mapping pro ka≈æd√Ω pain
      topPains.forEach(pain => {
        const isCovered = coveredPainIds.has(pain.id);
        const coveredBy = Object.entries(painRelieverMappings)
          .filter(([_, painIds]) => painIds.includes(pain.id))
          .map(([reliever]) => reliever);
        
        console.log(`${isCovered ? '‚úÖ' : '‚ùå'} Pain "${pain.text.substring(0, 30)}" pokryt: ${isCovered ? coveredBy.join(', ') : 'NEPOKRYT!'}`);
      });
    }
    
    return {
      topJobs,
      topPains,
      topGains,
      fitScore,
      coveredPainsCount,
      coveredGainsCount,
      coveredJobsCount,
      hasFit: fitScore >= 70,
      hasValidData
    };
  }, [jobs, pains, gains, painRelieverMappings, gainCreatorMappings, productMappings]);
  
  // Destructure pro pou≈æit√≠ v UI
  const { 
    topJobs, 
    topPains, 
    topGains, 
    fitScore, 
    coveredPainsCount, 
    coveredGainsCount, 
    coveredJobsCount,
    hasFit,
    hasValidData
  } = fitScoreData;
  
  // üéâ ACHIEVEMENT: FIT Score milestones - POSTUPNƒö v≈°echny dosa≈æen√© levely!
  useEffect(() => {
    if (!isLoading && fitScore > 0 && onAchievementUnlocked) {
      // ‚úÖ Pou≈æij samostatn√© IF bloky aby se spustily V≈†ECHNY dosa≈æen√© levely!
      if (fitScore >= 70) {
        console.log('üéØ FIT Score 70%+ reached! Triggering achievement...');
        onAchievementUnlocked('fit-70-percent');
      }
      if (fitScore >= 80) {
        console.log('üéØ FIT Score 80%+ reached! Triggering achievement...');
        onAchievementUnlocked('product-fit-master');
      }
      if (fitScore >= 90) {
        console.log('üéØ FIT Score 90%+ reached! Triggering achievement...');
        onAchievementUnlocked('fit-90-percent');
      }
      if (fitScore >= 100) {
        console.log('üéØ FIT Score 100%! PERFEKTN√ç FIT! Triggering achievement...');
        onAchievementUnlocked('product-fit-master');
      }
    }
  }, [fitScore, isLoading, onAchievementUnlocked]);

  if (isLoading) {
    return (
      <div className="bg-white rounded-xl border-2 border-gray-200 p-12 text-center">
        <RefreshCw className="w-12 h-12 text-blue-500 animate-spin mx-auto mb-4" />
        <p className="text-gray-600">Naƒç√≠t√°m va≈°e VPC data...</p>
      </div>
    );
  }

  // Check jestli je segment b√≠l√Ω
  const currentSegmentData = availableSegments.find(s => s.text === (selectedSegment || localSelectedSegment));
  const isBilySegment = currentSegmentData?.color === '#d1d5db' || currentSegmentData?.color?.toLowerCase() === 'white';

  return (
    <div className="space-y-6">
      {/* Segment/Value Selector */}
      {availableSegments.length > 0 && (
        <div className="mb-4 sm:mb-6 bg-white rounded-lg sm:rounded-xl border-2 border-blue-200 p-4 sm:p-6">
          <div className="flex flex-col md:flex-row gap-3 sm:gap-4 items-start md:items-center">
            <div className="flex-1">
              <label className="block text-sm font-bold text-gray-700 mb-2">
                üìä Validuji segment:
              </label>
              <select
                value={selectedSegment || localSelectedSegment}
                onChange={(e) => handleSegmentChange(e.target.value)}
                className="w-full px-4 py-2 border-2 border-gray-300 rounded-lg focus:border-blue-500 focus:ring-2 focus:ring-blue-200"
              >
                {availableSegments.map((seg) => (
                  <option key={seg.text} value={seg.text}>
                    {seg.text}
                  </option>
                ))}
              </select>
            </div>
            
            {isBilySegment && availableValues.length > 0 && (
              <div className="flex-1">
                <label className="block text-sm font-bold text-gray-700 mb-2">
                  üíé Pro hodnotu:
                </label>
                <select
                  value={localSelectedValue}
                  onChange={(e) => handleValueChange(e.target.value)}
                  className="w-full px-4 py-2 border-2 border-gray-300 rounded-lg focus:border-blue-500 focus:ring-2 focus:ring-blue-200"
                >
                  <option value="">-- Vyberte hodnotu --</option>
                  {availableValues
                    .filter(v => v.color === '#d1d5db' || v.color.toLowerCase() === 'white')
                    .map((val) => (
                      <option key={val.text} value={val.text}>
                        {val.text}
                      </option>
                    ))}
                </select>
              </div>
            )}
            
            {!isBilySegment && currentSegmentData && (() => {
              // Najdi v≈°echny hodnoty se stejnou barvou jako segment
              const matchingValues = availableValues.filter(v => v.color === currentSegmentData.color);
              
              return (
                <div className="flex-1">
                  <label className="block text-sm font-bold text-gray-700 mb-2">
                    üíé Hodnota {matchingValues.length > 1 ? '(vyberte)' : '(automaticky)'}:
                  </label>
                  {matchingValues.length > 1 ? (
                    <select
                      value={localSelectedValue}
                      onChange={(e) => handleValueChange(e.target.value)}
                      className="w-full px-4 py-2 border-2 rounded-lg focus:border-blue-500 focus:ring-2 focus:ring-blue-200"
                      style={{ borderColor: currentSegmentData.color }}
                    >
                      {matchingValues.map((val) => (
                        <option key={val.text} value={val.text}>
                          {val.text}
                        </option>
                      ))}
                    </select>
                  ) : (
                    <div 
                      className="w-full px-4 py-2 border-2 rounded-lg bg-gray-50 flex items-center gap-2"
                      style={{ borderColor: currentSegmentData.color }}
                    >
                      <div 
                        className="w-4 h-4 rounded-full" 
                        style={{ backgroundColor: currentSegmentData.color }}
                      />
                      <span className="text-gray-700">
                        {localSelectedValue || matchingValues[0]?.text || '-- Vyberte hodnotu --'}
                      </span>
                    </div>
                  )}
                </div>
              );
            })()}
          </div>
        </div>
      )}
      
      {/* üéØ GLOBAL STICKY BAR - Responzivn√≠ */}
      <div className="sticky top-0 z-50 bg-white border-b-2 border-gray-200 shadow-md -mx-2 sm:-mx-6 px-2 sm:px-6 py-2 sm:py-3 mb-4 sm:mb-6">
        {/* Progress Steps - kompaktn√≠, skryt√© na mal√Ωch mobilech */}
        <div className="flex items-center justify-center gap-2 sm:gap-3 mb-2 sm:mb-3">
          <StepIndicator 
            number={1} 
            title="Pr≈Øzkum" 
            isActive={currentStep === 1}
            isComplete={currentStep > 1}
          />
          <div className="w-6 sm:w-12 h-0.5 bg-gray-300" />
          <StepIndicator 
            number={2} 
            title="Prioritizace" 
            isActive={currentStep === 2}
            isComplete={currentStep > 2}
          />
          <div className="w-6 sm:w-12 h-0.5 bg-gray-300" />
          <StepIndicator 
            number={3} 
            title="FIT Score" 
            isActive={currentStep === 3}
            isComplete={false}
          />
        </div>
        
        {/* Segment & Value selectors - stack na mobilu */}
        <div className="flex flex-col sm:flex-row items-center justify-center gap-2 sm:gap-4 text-xs sm:text-sm">
          <div className="flex items-center gap-1.5 sm:gap-2">
            <span className="text-gray-600 font-medium">Segment:</span>
            <div className="text-gray-900 font-semibold truncate max-w-[150px] sm:max-w-none">{localSelectedSegment || selectedSegment}</div>
          </div>
          {localSelectedValue && (
            <>
              <span className="text-gray-400 hidden sm:inline">‚Üí</span>
              <div className="flex items-center gap-1.5 sm:gap-2">
                <span className="text-gray-600 font-medium">Hodnota:</span>
                <div className="text-gray-900 font-semibold truncate max-w-[150px] sm:max-w-none">{localSelectedValue}</div>
              </div>
            </>
          )}
        </div>
      </div>

      <div>
        {/* STEP 1: DISCOVERY */}
        {currentStep === 1 && (
          <div
            className="space-y-4 sm:space-y-6 animate-in fade-in slide-in-from-right-4 duration-300"
          >
            {/* Kompaktn√≠ header + collapsible help - Responzivn√≠ */}
            <div className="bg-gradient-to-r from-blue-500 to-purple-500 text-white rounded-lg sm:rounded-xl p-4 sm:p-6 flex flex-col sm:flex-row items-start sm:items-center gap-3 sm:gap-0 sm:justify-between">
              <div className="flex-1">
                <h2 className="text-lg sm:text-2xl font-bold mb-1">{guide.title}</h2>
                <p className="text-sm sm:text-base text-white/90">{guide.description}</p>
              </div>
              
              <button
                onClick={() => {
                  const helpEl = document.getElementById('step1-help');
                  if (helpEl) {
                    helpEl.classList.toggle('hidden');
                  }
                }}
                className="px-3 sm:px-4 py-2 bg-white/20 hover:bg-white/30 rounded-lg font-medium transition-colors flex items-center gap-2 text-sm sm:text-base self-end sm:self-auto sm:ml-4"
              >
                <Lightbulb className="w-4 h-4 sm:w-5 sm:h-5" />
                <span>Help</span>
              </button>
            </div>
            
            {/* ‚ÑπÔ∏è Collapsible Help */}
            <div id="step1-help" className="hidden">
              <FitStepInstructions step={1} />
            </div>

            {/* Methodology - Responzivn√≠ */}
            <div className="bg-white rounded-lg sm:rounded-xl border-2 border-gray-200 p-4 sm:p-8">
              <h3 className="text-base sm:text-lg mb-4 sm:mb-6 text-gray-900">
                üîç Jak zjistit co je pro {selectedSegment || 'v√°≈° segment'} kritick√©?
              </h3>
              
              <div className="mb-4 sm:mb-6 bg-blue-50 border-2 border-blue-300 rounded-lg sm:rounded-xl p-4 sm:p-6">
                <div className="flex gap-3">
                  <Info className="w-5 h-5 text-blue-600 flex-shrink-0 mt-0.5" />
                  <p className="text-blue-900">
                    <strong>D≈Øle≈æit√©:</strong> Nem≈Ø≈æete jen h√°dat co z√°kazn√≠k pot≈ôebuje. 
                    Mus√≠te to ZJISTIT - pt√°t se, pozorovat, analyzovat!
                  </p>
                </div>
              </div>

              {/* DESKTOP: Grid (md+) */}
              <div className="hidden md:grid md:grid-cols-3 gap-6">
                {/* Jobs Discovery */}
                <div className="bg-yellow-50 p-6 rounded-xl border-2 border-yellow-300">
                  <h4 className="mb-3 text-yellow-900 flex items-center gap-2">
                    <Target className="w-5 h-5" />
                    C√≠le/D≈Øvody (Jobs)
                  </h4>
                  <div className="space-y-3 mb-4">
                    <p className="font-bold text-yellow-800">Ot√°zky k polo≈æen√≠:</p>
                    {guide.questions.jobs.map((q, i) => (
                      <p key={i} className="text-yellow-900">‚Ä¢ {q}</p>
                    ))}
                  </div>
                  <div className="space-y-2">
                    <p className="font-bold text-yellow-800">P≈ô√≠klady odpovƒõd√≠:</p>
                    {guide.examples.jobs.map((ex, i) => (
                      <div key={i} className="bg-white p-3 pl-4 rounded-lg border-l-4 border-yellow-400 shadow-sm">
                        <p className="text-yellow-800 leading-relaxed">
                          "{ex}"
                        </p>
                      </div>
                    ))}
                  </div>
                </div>

                {/* Pains Discovery */}
                <div className="bg-red-50 p-6 rounded-xl border-2 border-red-300">
                  <h4 className="mb-3 text-red-900 flex items-center gap-2">
                    <AlertCircle className="w-5 h-5" />
                    Obavy/Probl√©my (Pains)
                  </h4>
                  <div className="space-y-3 mb-4">
                    <p className="font-bold text-red-800">Ot√°zky k polo≈æen√≠:</p>
                    {guide.questions.pains.map((q, i) => (
                      <p key={i} className="text-red-900">‚Ä¢ {q}</p>
                    ))}
                  </div>
                  <div className="space-y-2">
                    <p className="font-bold text-red-800">P≈ô√≠klady odpovƒõd√≠:</p>
                    {guide.examples.pains.map((ex, i) => (
                      <div key={i} className="bg-white p-3 pl-4 rounded-lg border-l-4 border-red-400 shadow-sm">
                        <p className="text-red-800 leading-relaxed">
                          "{ex}"
                        </p>
                      </div>
                    ))}
                  </div>
                </div>

                {/* Gains Discovery */}
                <div className="bg-green-50 p-6 rounded-xl border-2 border-green-300">
                  <h4 className="mb-3 text-green-900 flex items-center gap-2">
                    <Star className="w-5 h-5" />
                    Oƒçek√°v√°n√≠/Touhy (Gains)
                  </h4>
                  <div className="space-y-3 mb-4">
                    <p className="font-bold text-green-800">Ot√°zky k polo≈æen√≠:</p>
                    {guide.questions.gains.map((q, i) => (
                      <p key={i} className="text-green-900">‚Ä¢ {q}</p>
                    ))}
                  </div>
                  <div className="space-y-2">
                    <p className="font-bold text-green-800">P≈ô√≠klady odpovƒõd√≠:</p>
                    {guide.examples.gains.map((ex, i) => (
                      <div key={i} className="bg-white p-3 pl-4 rounded-lg border-l-4 border-green-400 shadow-sm">
                        <p className="text-green-800 leading-relaxed">
                          "{ex}"
                        </p>
                      </div>
                    ))}
                  </div>
                </div>
              </div>

              {/* MOBILE: Accordion (sm only) */}
              <Accordion type="single" collapsible className="md:hidden space-y-3">
                {/* Jobs Accordion */}
                <AccordionItem value="jobs" className="bg-yellow-50 border-2 border-yellow-300 rounded-xl overflow-hidden">
                  <AccordionTrigger className="px-4 py-3 hover:no-underline">
                    <div className="flex items-center gap-2 text-yellow-900">
                      <Target className="w-5 h-5" />
                      <span className="font-bold">C√≠le/D≈Øvody (Jobs)</span>
                    </div>
                  </AccordionTrigger>
                  <AccordionContent className="px-4 pb-4">
                    <div className="space-y-3 mb-4">
                      <p className="font-bold text-yellow-800">Ot√°zky k polo≈æen√≠:</p>
                      {guide.questions.jobs.map((q, i) => (
                        <p key={i} className="text-sm text-yellow-900">‚Ä¢ {q}</p>
                      ))}
                    </div>
                    <div className="space-y-2">
                      <p className="font-bold text-yellow-800">P≈ô√≠klady odpovƒõd√≠:</p>
                      {guide.examples.jobs.map((ex, i) => (
                        <div key={i} className="bg-white p-3 pl-4 rounded-lg border-l-4 border-yellow-400 shadow-sm">
                          <p className="text-sm text-yellow-800 leading-relaxed">
                            "{ex}"
                          </p>
                        </div>
                      ))}
                    </div>
                  </AccordionContent>
                </AccordionItem>

                {/* Pains Accordion */}
                <AccordionItem value="pains" className="bg-red-50 border-2 border-red-300 rounded-xl overflow-hidden">
                  <AccordionTrigger className="px-4 py-3 hover:no-underline">
                    <div className="flex items-center gap-2 text-red-900">
                      <AlertCircle className="w-5 h-5" />
                      <span className="font-bold">Obavy/Probl√©my (Pains)</span>
                    </div>
                  </AccordionTrigger>
                  <AccordionContent className="px-4 pb-4">
                    <div className="space-y-3 mb-4">
                      <p className="font-bold text-red-800">Ot√°zky k polo≈æen√≠:</p>
                      {guide.questions.pains.map((q, i) => (
                        <p key={i} className="text-sm text-red-900">‚Ä¢ {q}</p>
                      ))}
                    </div>
                    <div className="space-y-2">
                      <p className="font-bold text-red-800">P≈ô√≠klady odpovƒõd√≠:</p>
                      {guide.examples.pains.map((ex, i) => (
                        <div key={i} className="bg-white p-3 pl-4 rounded-lg border-l-4 border-red-400 shadow-sm">
                          <p className="text-sm text-red-800 leading-relaxed">
                            "{ex}"
                          </p>
                        </div>
                      ))}
                    </div>
                  </AccordionContent>
                </AccordionItem>

                {/* Gains Accordion */}
                <AccordionItem value="gains" className="bg-green-50 border-2 border-green-300 rounded-xl overflow-hidden">
                  <AccordionTrigger className="px-4 py-3 hover:no-underline">
                    <div className="flex items-center gap-2 text-green-900">
                      <Sparkles className="w-5 h-5" />
                      <span className="font-bold">Touhy/P≈ô√≠nosy (Gains)</span>
                    </div>
                  </AccordionTrigger>
                  <AccordionContent className="px-4 pb-4">
                    <div className="space-y-3 mb-4">
                      <p className="font-bold text-green-800">Ot√°zky k polo≈æen√≠:</p>
                      {guide.questions.gains.map((q, i) => (
                        <p key={i} className="text-sm text-green-900">‚Ä¢ {q}</p>
                      ))}
                    </div>
                    <div className="space-y-2">
                      <p className="font-bold text-green-800">P≈ô√≠klady odpovƒõd√≠:</p>
                      {guide.examples.gains.map((ex, i) => (
                        <div key={i} className="bg-white p-3 pl-4 rounded-lg border-l-4 border-green-400 shadow-sm">
                          <p className="text-sm text-green-800 leading-relaxed">
                            "{ex}"
                          </p>
                        </div>
                      ))}
                    </div>
                  </AccordionContent>
                </AccordionItem>
              </Accordion>

              {/* Action Steps */}
              <div className="mt-6 bg-purple-50 border-l-4 border-purple-500 p-6 rounded-xl">
                <h4 className="mb-3 text-purple-900">üí™ Va≈°e akce P≈òED pokraƒçov√°n√≠m:</h4>
                <ol className="space-y-2 text-purple-800">
                  <li><strong>1.</strong> Projdƒõte si v√Ω≈°e uveden√© ot√°zky</li>
                  <li><strong>2.</strong> Zeptejte se alespo≈à 3-5 lid√≠ z va≈°eho segmentu</li>
                  <li><strong>3.</strong> Analyzujte jejich odpovƒõdi a najdƒõte vzorce</li>
                  <li><strong>4.</strong> A≈æ budete m√≠t jasno, pokraƒçujte k prioritizaci!</li>
                </ol>
              </div>

              {/* Status va≈°ich dat - Responzivn√≠ */}
              <div className="mt-4 sm:mt-6 bg-blue-50 border-2 border-blue-300 rounded-lg sm:rounded-xl p-4 sm:p-6">
                <h4 className="mb-3 sm:mb-4 text-sm sm:text-base text-blue-900">üìä Va≈°e souƒçasn√° data z Lekce 1:</h4>
                <div className="grid grid-cols-3 gap-2 sm:gap-4 mb-3 sm:mb-4">
                  <div className="text-center">
                    <div className={`text-2xl sm:text-3xl font-bold mb-1 ${jobs.length > 0 ? 'text-green-600' : 'text-gray-400'}`}>
                      {jobs.length}
                    </div>
                    <p className="text-xs sm:text-sm text-gray-600">Jobs</p>
                  </div>
                  <div className="text-center">
                    <div className={`text-2xl sm:text-3xl font-bold mb-1 ${pains.length > 0 ? 'text-green-600' : 'text-gray-400'}`}>
                      {pains.length}
                    </div>
                    <p className="text-xs sm:text-sm text-gray-600">Pains</p>
                  </div>
                  <div className="text-center">
                    <div className={`text-2xl sm:text-3xl font-bold mb-1 ${gains.length > 0 ? 'text-green-600' : 'text-gray-400'}`}>
                      {gains.length}
                    </div>
                    <p className="text-xs sm:text-sm text-gray-600">Gains</p>
                  </div>
                </div>
                
                {(jobs.length > 0 || pains.length > 0 || gains.length > 0) && (
                  <div className="bg-white p-4 rounded-lg border border-blue-200">
                    <p className="text-blue-900 font-bold mb-2">
                      ‚úÖ M√°te data k prioritizaci!
                    </p>
                    <p className="text-blue-700">
                      V dal≈°√≠ f√°zi je se≈ôad√≠te podle d≈Øle≈æitosti - kter√© probl√©my/touhy segment ≈ôe≈°√≠ NEJƒåASTƒöJI 
                      nebo pova≈æuje za NEJD≈ÆLE≈ΩITƒöJ≈†√ç podle va≈°eho pr≈Øzkumu z Kroku 1.
                    </p>
                  </div>
                )}
                {jobs.length === 0 && pains.length === 0 && gains.length === 0 && (
                  <p className="text-sm text-amber-700 mt-3 text-center">
                    ‚ö†Ô∏è P≈ôejdƒõte do Lekce 1 (Z√°kaznick√Ω profil) a vypl≈àte alespo≈à nƒõkter√© polo≈æky.
                  </p>
                )}
              </div>
            </div>

            {/* Navigation */}
            <div className="flex flex-col items-end gap-3">
              {(jobs.length === 0 || pains.length === 0 || gains.length === 0) && (
                <Alert className="bg-amber-50 border-amber-200">
                  <Info className="h-4 w-4" />
                  <AlertDescription>
                    <strong>‚ö†Ô∏è Chyb√≠ data:</strong> Mus√≠te vyplnit <strong>V≈†ECHNY T≈òI kategorie</strong>: Jobs, Pains a Gains v Lekci 1 (Z√°kaznick√Ω profil).
                    Bez kompletn√≠ch dat nem≈Ø≈æete pokraƒçovat k prioritizaci.
                  </AlertDescription>
                </Alert>
              )}
              <Button
                size="lg"
                onClick={() => {
                  setCurrentStep(2);
                  saveFitProgress();
                }}
                className="gap-2"
                disabled={jobs.length === 0 || pains.length === 0 || gains.length === 0}
              >
                Pokraƒçovat k prioritizaci
                <ArrowRight className="w-5 h-5" />
              </Button>
            </div>
          </div>
        )}

        {/* STEP 2: PRIORITIZATION */}
        {currentStep === 2 && (
          <div
            className="space-y-6 animate-in fade-in slide-in-from-right-4 duration-300"
          >
            {/* Kompaktn√≠ header s controls - Responzivn√≠ */}
            <div className="bg-gradient-to-r from-orange-50 to-red-50 rounded-lg sm:rounded-xl p-4 sm:p-6 space-y-3 sm:space-y-4">
              <div className="flex flex-col sm:flex-row items-start sm:items-center gap-3 sm:justify-between">
                <div className="flex items-center gap-2 sm:gap-3">
                  <Target className="w-5 h-5 sm:w-6 sm:h-6 text-orange-600 flex-shrink-0" />
                  <div>
                    <h2 className="text-base sm:text-lg font-bold text-gray-900">üéØ Prioritizace</h2>
                    <p className="text-xs sm:text-sm text-gray-600">
                      {step2View === 'customer' 
                        ? 'Oznaƒçte kolik lid√≠ ka≈ædou polo≈æku zmi≈àovalo'
                        : 'Zkontrolujte co nab√≠z√≠te'}
                    </p>
                  </div>
                </div>
                
                <button
                  onClick={() => {
                    const helpEl = document.getElementById('step2-help');
                    if (helpEl) {
                      helpEl.classList.toggle('hidden');
                    }
                  }}
                  className="px-3 sm:px-4 py-2 bg-white/80 hover:bg-white text-gray-700 rounded-lg font-medium transition-colors flex items-center gap-2 text-sm sm:text-base self-end sm:self-auto"
                >
                  <Lightbulb className="w-4 h-4 sm:w-5 sm:h-5" />
                  <span>Help</span>
                </button>
              </div>
              
              {/* Controls - Stack na mobilu */}
              <div className="flex flex-col sm:flex-row items-stretch sm:items-center gap-2 sm:gap-4">
                <div className="flex items-center gap-2 bg-white rounded-lg p-1 shadow-sm">
                  <button
                    onClick={() => setStep2View('customer')}
                    className={`px-3 py-2 rounded-md text-sm font-medium transition-all ${
                      step2View === 'customer'
                        ? 'bg-blue-500 text-white shadow-sm'
                        : 'text-gray-600 hover:bg-gray-100'
                    }`}
                  >
                    üë• Z√°kaznick√Ω profil
                  </button>
                  <button
                    onClick={() => setStep2View('value')}
                    className={`px-3 py-2 rounded-md text-sm font-medium transition-all ${
                      step2View === 'value'
                        ? 'bg-green-500 text-white shadow-sm'
                        : 'text-gray-600 hover:bg-gray-100'
                    }`}
                  >
                    üíé Hodnotov√° mapa
                  </button>
                </div>
                
                {step2View === 'customer' && (
                  <div className="flex items-center gap-2 bg-white px-3 py-2 rounded-lg shadow-sm">
                    <label className="text-sm font-medium text-gray-700">
                      üìä Poƒçet lid√≠:
                    </label>
                    <input
                      type="number"
                      min="1"
                      max="100"
                      value={totalRespondents}
                      onChange={(e) => setTotalRespondents(parseInt(e.target.value) || 10)}
                      className="w-16 px-2 py-1 border border-gray-300 rounded bg-white text-gray-900 font-bold text-center focus:ring-2 focus:ring-blue-400 focus:outline-none"
                    />
                  </div>
                )}
              </div>
            </div>
            
            {/* ‚ÑπÔ∏è Collapsible Help */}
            <div id="step2-help" className="hidden">
              <FitStepInstructions step={2} />
            </div>

            {/* DYNAMICK√â BOXY podle step2View */}
            {step2View === 'customer' ? (
              <>
                {(() => {
                // ‚úÖ Zjisti jestli maj√≠ alespo≈à jednu polo≈æku s count > 0
                const hasAnyPrioritized = jobs.some(j => (j.count || 0) > 0) || 
                                         pains.some(p => (p.count || 0) > 0) || 
                                         gains.some(g => (g.count || 0) > 0);
                
                if (!hasAnyPrioritized) {
                  // Je≈°tƒõ nezaƒçali hodnotit
                  return (
                    <div className="bg-amber-50 border-2 border-amber-400 rounded-xl p-6">
                      <div className="flex gap-4">
                        <Info className="w-5 h-5 text-amber-600 flex-shrink-0 mt-0.5" />
                        <div className="flex-1 space-y-3">
                          <div>
                            <p className="font-bold text-amber-900 mb-1">üëâ Zaƒçnƒõte hodnotit!</p>
                            <p className="text-sm text-amber-700">
                              Pro ka≈ædou polo≈æku n√≠≈æe zadejte kolik lid√≠ to zmi≈àovalo. Automaticky se se≈ôad√≠ podle ƒçetnosti.
                            </p>
                          </div>
                        </div>
                      </div>
                    </div>
                  );
                } else {
                  // U≈æ zaƒçali hodnotit - ukaz zelen√Ω banner
                  return (
                    <div className="bg-green-50 border-2 border-green-200 rounded-xl p-6">
                      <div className="flex gap-4">
                        <CheckCircle className="w-5 h-5 text-green-600 flex-shrink-0 mt-0.5" />
                        <div className="flex-1 space-y-3">
                          <div>
                            <p className="font-bold text-green-900 mb-1">‚úÖ Skvƒõl√©!</p>
                            <p className="text-sm text-green-700">
                              Polo≈æky s nejvy≈°≈°√≠m % se automaticky oznaƒç√≠ hvƒõzdiƒçkou ‚≠ê jako TOP priority a budete je validovat v dal≈°√≠m kroku.
                            </p>
                          </div>
                        </div>
                      </div>
                    </div>
                  );
                }
              })()}

                {/* INFO: Jak funguje maz√°n√≠ - JEN POKUD U≈Ω ZAƒåALI HODNOTIT */}
                {(() => {
                  const hasAnyPrioritized = jobs.some(j => (j.count || 0) > 0) || 
                                           pains.some(p => (p.count || 0) > 0) || 
                                           gains.some(g => (g.count || 0) > 0);
                  
                  if (hasAnyPrioritized) {
                    return (
                      <div className="bg-blue-50 border-2 border-blue-300 rounded-xl p-6 text-blue-800">
                        <p className="mb-1">üí° Jak upravovat/mazat polo≈æky:</p>
                        <ul className="space-y-1 ml-4 list-disc">
                          <li>Sni≈æte poƒçet lid√≠ na <strong>0</strong> ‚Üí objev√≠ se ko≈° üóëÔ∏è</li>
                          <li>Kliknƒõte na ko≈° pro smaz√°n√≠</li>
                          <li>Polo≈æky s hvƒõzdiƒçkou ‚≠ê jsou TOP priority (nejvy≈°≈°√≠ %)</li>
                        </ul>
                      </div>
                    );
                  }
                  return null;
                })()}
              </>
            ) : null}

            {/* Prioritization Grids - DESKTOP */}
            {step2View === 'customer' && (
            <div className="hidden md:grid lg:grid-cols-3 md:grid-cols-2 grid-cols-1 gap-4">
              {/* Jobs - ‚úÖ ALWAYS SHOW! */}
              <div className="bg-white rounded-xl border-2 border-gray-200 p-6">
                  <div className="flex items-center justify-between mb-4">
                    <h3 className="font-bold text-gray-900 flex items-center gap-2">
                      <Target className="w-5 h-5 text-yellow-600" />
                      C√≠le (Jobs)
                    </h3>
                    <div className="text-xs text-gray-500 text-right">
                      <div className="flex items-center gap-1 justify-end">
                        <span>Kolik lid√≠ (z {totalRespondents}) toto zmi≈àovalo</span>
                      </div>
                    </div>
                  </div>
                  
                  <div className="space-y-3">
                    {jobs.map((job, index) => (
                      <PriorityItemWithScore
                        key={job.id}
                        text={job.text}
                        index={index}
                        total={jobs.length}
                        totalRespondents={totalRespondents}
                        count={job.count || 0}
                        percentage={job.percentage || 0}
                        color="yellow"
                        onUpdateCount={(count) => updateItemCount('jobs', index, count)}
                        onDelete={() => deleteItem('jobs', job.id, job.text)}
                        showPriorities={hasUserSorted}
                        allItems={jobs}
                      />
                    ))}
                    
                    {/* ‚ûï Add new Job */}
                    <AddItemInput
                      category="jobs"
                      placeholder="P≈ôidat nov√Ω c√≠l..."
                      onAdd={(text) => addItem('jobs', text)}
                      color="yellow"
                    />
                  </div>
                </div>

              {/* Pains - ‚úÖ ALWAYS SHOW! */}
              <div className="bg-white rounded-xl border-2 border-gray-200 p-6">
                  <div className="flex items-center justify-between mb-4">
                    <h3 className="font-bold text-gray-900 flex items-center gap-2">
                      <AlertCircle className="w-5 h-5 text-red-600" />
                      Obavy (Pains)
                    </h3>
                    <div className="text-xs text-gray-500 text-right">
                      <div className="flex items-center gap-1 justify-end">
                        <span>Kolik lid√≠ (z {totalRespondents}) toto zmi≈àovalo</span>
                      </div>
                    </div>
                  </div>
                  
                  <div className="space-y-3">
                    {pains.map((pain, index) => (
                      <PriorityItemWithScore
                        key={pain.id}
                        text={pain.text}
                        index={index}
                        total={pains.length}
                        totalRespondents={totalRespondents}
                        count={pain.count || 0}
                        percentage={pain.percentage || 0}
                        color="red"
                        onUpdateCount={(count) => updateItemCount('pains', index, count)}
                        onDelete={() => deleteItem('pains', pain.id, pain.text)}
                        showPriorities={hasUserSorted}
                        allItems={pains}
                      />
                    ))}
                    
                    {/* ‚ûï Add new Pain */}
                    <AddItemInput
                      category="pains"
                      placeholder="P≈ôidat novou obavu..."
                      onAdd={(text) => addItem('pains', text)}
                      color="red"
                    />
                  </div>
                </div>

              {/* Gains - ‚úÖ ALWAYS SHOW! */}
              <div className="bg-white rounded-xl border-2 border-gray-200 p-6">
                  <div className="flex items-center justify-between mb-4">
                    <h3 className="font-bold text-gray-900 flex items-center gap-2">
                      <Star className="w-5 h-5 text-green-600" />
                      Oƒçek√°v√°n√≠ (Gains)
                    </h3>
                    <div className="text-xs text-gray-500 text-right">
                      <div className="flex items-center gap-1 justify-end">
                        <span>Kolik lid√≠ (z {totalRespondents}) toto zmi≈àovalo</span>
                      </div>
                    </div>
                  </div>
                  
                  <div className="space-y-3">
                    {gains.length === 0 ? (
                      <p className="text-center text-gray-400 py-8">≈Ω√°dn√° oƒçek√°v√°n√≠</p>
                    ) : (
                      gains.map((gain, index) => (
                      <PriorityItemWithScore
                        key={gain.id}
                        text={gain.text}
                        index={index}
                        total={gains.length}
                        totalRespondents={totalRespondents}
                        count={gain.count || 0}
                        percentage={gain.percentage || 0}
                        color="green"
                        onUpdateCount={(count) => updateItemCount('gains', index, count)}
                        onDelete={() => deleteItem('gains', gain.id, gain.text)}
                        showPriorities={hasUserSorted}
                        allItems={gains}
                      />
                      ))
                    )}
                    
                    {/* ‚ûï Add new Gain */}
                    <AddItemInput
                      category="gains"
                      placeholder="P≈ôidat nov√© oƒçek√°v√°n√≠..."
                      onAdd={(text) => addItem('gains', text)}
                      color="green"
                    />
                  </div>
                </div>
            </div>
            )}

            {/* MOBILE: Accordion pro Jobs/Pains/Gains */}
            {step2View === 'customer' && (
              <Accordion type="single" collapsible className="md:hidden space-y-3">
                {/* Jobs Accordion */}
                <AccordionItem value="jobs" className="bg-yellow-50 border-2 border-yellow-300 rounded-xl overflow-hidden">
                  <AccordionTrigger className="px-4 py-3 hover:no-underline">
                    <div className="flex items-center justify-between w-full pr-3">
                      <div className="flex items-center gap-2">
                        <Target className="w-5 h-5 text-yellow-600" />
                        <span className="font-bold text-yellow-900">C√≠le (Jobs)</span>
                      </div>
                      <span className="text-xs text-yellow-700 bg-yellow-200 px-2 py-1 rounded">
                        {jobs.length} polo≈æek
                      </span>
                    </div>
                  </AccordionTrigger>
                  <AccordionContent className="px-4 pb-4">
                    <div className="text-xs text-gray-600 mb-3">
                      Kolik lid√≠ (z {totalRespondents}) toto zmi≈àovalo
                    </div>
                    <div className="space-y-3">
                      {jobs.map((job, index) => (
                        <PriorityItemWithScore
                          key={job.id}
                          text={job.text}
                          index={index}
                          total={jobs.length}
                          totalRespondents={totalRespondents}
                          count={job.count || 0}
                          percentage={job.percentage || 0}
                          color="yellow"
                          onUpdateCount={(count) => updateItemCount('jobs', index, count)}
                          onDelete={() => deleteItem('jobs', job.id, job.text)}
                          showPriorities={hasUserSorted}
                          allItems={jobs}
                        />
                      ))}
                      <AddItemInput
                        category="jobs"
                        placeholder="P≈ôidat nov√Ω c√≠l..."
                        onAdd={(text) => addItem('jobs', text)}
                        color="yellow"
                      />
                    </div>
                  </AccordionContent>
                </AccordionItem>

                {/* Pains Accordion */}
                <AccordionItem value="pains" className="bg-red-50 border-2 border-red-300 rounded-xl overflow-hidden">
                  <AccordionTrigger className="px-4 py-3 hover:no-underline">
                    <div className="flex items-center justify-between w-full pr-3">
                      <div className="flex items-center gap-2">
                        <AlertCircle className="w-5 h-5 text-red-600" />
                        <span className="font-bold text-red-900">Obavy (Pains)</span>
                      </div>
                      <span className="text-xs text-red-700 bg-red-200 px-2 py-1 rounded">
                        {pains.length} polo≈æek
                      </span>
                    </div>
                  </AccordionTrigger>
                  <AccordionContent className="px-4 pb-4">
                    <div className="text-xs text-gray-600 mb-3">
                      Kolik lid√≠ (z {totalRespondents}) toto zmi≈àovalo
                    </div>
                    <div className="space-y-3">
                      {pains.map((pain, index) => (
                        <PriorityItemWithScore
                          key={pain.id}
                          text={pain.text}
                          index={index}
                          total={pains.length}
                          totalRespondents={totalRespondents}
                          count={pain.count || 0}
                          percentage={pain.percentage || 0}
                          color="red"
                          onUpdateCount={(count) => updateItemCount('pains', index, count)}
                          onDelete={() => deleteItem('pains', pain.id, pain.text)}
                          showPriorities={hasUserSorted}
                          allItems={pains}
                        />
                      ))}
                      <AddItemInput
                        category="pains"
                        placeholder="P≈ôidat novou obavu..."
                        onAdd={(text) => addItem('pains', text)}
                        color="red"
                      />
                    </div>
                  </AccordionContent>
                </AccordionItem>

                {/* Gains Accordion */}
                <AccordionItem value="gains" className="bg-green-50 border-2 border-green-300 rounded-xl overflow-hidden">
                  <AccordionTrigger className="px-4 py-3 hover:no-underline">
                    <div className="flex items-center justify-between w-full pr-3">
                      <div className="flex items-center gap-2">
                        <Star className="w-5 h-5 text-green-600" />
                        <span className="font-bold text-green-900">Oƒçek√°v√°n√≠ (Gains)</span>
                      </div>
                      <span className="text-xs text-green-700 bg-green-200 px-2 py-1 rounded">
                        {gains.length} polo≈æek
                      </span>
                    </div>
                  </AccordionTrigger>
                  <AccordionContent className="px-4 pb-4">
                    <div className="text-xs text-gray-600 mb-3">
                      Kolik lid√≠ (z {totalRespondents}) toto zmi≈àovalo
                    </div>
                    <div className="space-y-3">
                      {gains.map((gain, index) => (
                        <PriorityItemWithScore
                          key={gain.id}
                          text={gain.text}
                          index={index}
                          total={gains.length}
                          totalRespondents={totalRespondents}
                          count={gain.count || 0}
                          percentage={gain.percentage || 0}
                          color="green"
                          onUpdateCount={(count) => updateItemCount('gains', index, count)}
                          onDelete={() => deleteItem('gains', gain.id, gain.text)}
                          showPriorities={hasUserSorted}
                          allItems={gains}
                        />
                      ))}
                      <AddItemInput
                        category="gains"
                        placeholder="P≈ôidat nov√© oƒçek√°v√°n√≠..."
                        onAdd={(text) => addItem('gains', text)}
                        color="green"
                      />
                    </div>
                  </AccordionContent>
                </AccordionItem>
              </Accordion>
            )}

            {/* Value Map Grids - EDITOVATELN√â! */}
            {step2View === 'value' && (
            <div className="space-y-4">
              <div className="bg-blue-50 border-2 border-blue-200 rounded-xl p-4">
                <p className="text-sm text-blue-800">
                  <strong>üí° Tip:</strong> P≈ôid√°vejte, upravujte nebo ma≈æte polo≈æky p≈ô√≠mo zde, nebo <button 
                    onClick={() => onNavigateToLesson && onNavigateToLesson(15)}
                    className="text-blue-600 hover:text-blue-700 underline font-semibold"
                  >
                    p≈ôejdƒõte do Lekce 2 (Hodnotov√° mapa)
                  </button> pro detailnƒõj≈°√≠ editaci.
                </p>
              </div>
              
              <div className="grid lg:grid-cols-3 md:grid-cols-2 grid-cols-1 gap-4">
                {/* Products - EDITOVATELN√â */}
                <div className="bg-white rounded-xl border-2 border-gray-200 p-6">
                  <div className="flex items-center justify-between mb-4">
                    <h3 className="font-bold text-gray-900 flex items-center gap-2">
                      üì¶ Produkty/Slu≈æby
                    </h3>
                  </div>
                  <p className="text-xs text-gray-600 mb-3">Co konkr√©tnƒõ nab√≠z√≠te?</p>
                  <div className="space-y-2">
                    {products.map((product, idx) => {
                      // ‚úÖ FIX: product m≈Ø≈æe b√Ωt string nebo object!
                      const productText = typeof product === 'string' ? product : product?.text || '';
                      return (
                      <div key={idx} className="group relative flex items-start gap-2 p-2 bg-orange-50 border border-orange-200 rounded transition-colors hover:bg-orange-100">
                        <CheckCircle className="w-4 h-4 text-orange-600 flex-shrink-0 mt-0.5" />
                        <span className="text-sm text-gray-700 flex-1">{productText}</span>
                        <button
                          onClick={() => deleteValueMapItem('products', idx)}
                          className="opacity-0 group-hover:opacity-100 transition-opacity text-red-500 hover:text-red-700"
                          title="Smazat"
                        >
                          <X className="w-4 h-4" />
                        </button>
                      </div>
                      );
                    })}
                    
                    {/* ‚ûï Add new Product */}
                    <AddItemInput
                      category="products"
                      placeholder="P≈ôidat produkt/slu≈æbu..."
                      onAdd={(text) => addValueMapItem('products', text)}
                      color="yellow"
                    />
                  </div>
                </div>

                {/* Pain Relievers - EDITOVATELN√â */}
                <div className="bg-white rounded-xl border-2 border-gray-200 p-6">
                  <div className="flex items-center justify-between mb-4">
                    <h3 className="font-bold text-gray-900 flex items-center gap-2">
                      üíä ≈òe≈°en√≠ obt√≠≈æ√≠
                    </h3>
                  </div>
                  <p className="text-xs text-gray-600 mb-3">Jak ≈ôe≈°√≠te probl√©my z√°kazn√≠ka?</p>
                  <div className="space-y-2">
                    {painRelievers.map((reliever, idx) => {
                      // ‚úÖ FIX: reliever m≈Ø≈æe b√Ωt string nebo object!
                      const relieverText = typeof reliever === 'string' ? reliever : reliever?.text || '';
                      return (
                      <div key={idx} className="group relative flex items-start gap-2 p-2 bg-purple-50 border border-purple-200 rounded transition-colors hover:bg-purple-100">
                        <CheckCircle className="w-4 h-4 text-purple-600 flex-shrink-0 mt-0.5" />
                        <span className="text-sm text-gray-700 flex-1">{relieverText}</span>
                        <button
                          onClick={() => deleteValueMapItem('painRelievers', idx)}
                          className="opacity-0 group-hover:opacity-100 transition-opacity text-red-500 hover:text-red-700"
                          title="Smazat"
                        >
                          <X className="w-4 h-4" />
                        </button>
                      </div>
                      );
                    })}
                    
                    {/* ‚ûï Add new Pain Reliever */}
                    <AddItemInput
                      category="painRelievers"
                      placeholder="P≈ôidat ≈ôe≈°en√≠ obt√≠≈æ√≠..."
                      onAdd={(text) => addValueMapItem('painRelievers', text)}
                      color="red"
                    />
                  </div>
                </div>

                {/* Gain Creators - EDITOVATELN√â */}
                <div className="bg-white rounded-xl border-2 border-gray-200 p-6">
                  <div className="flex items-center justify-between mb-4">
                    <h3 className="font-bold text-gray-900 flex items-center gap-2">
                      ‚ú® Tvorba p≈ô√≠nos≈Ø
                    </h3>
                  </div>
                  <p className="text-xs text-gray-600 mb-3">Jak vytv√°≈ô√≠te hodnotu?</p>
                  <div className="space-y-2">
                    {gainCreators.map((creator, idx) => {
                      // ‚úÖ FIX: creator m≈Ø≈æe b√Ωt string nebo object!
                      const creatorText = typeof creator === 'string' ? creator : creator?.text || '';
                      return (
                      <div key={idx} className="group relative flex items-start gap-2 p-2 bg-green-50 border border-green-200 rounded transition-colors hover:bg-green-100">
                        <CheckCircle className="w-4 h-4 text-green-600 flex-shrink-0 mt-0.5" />
                        <span className="text-sm text-gray-700 flex-1">{creatorText}</span>
                        <button
                          onClick={() => deleteValueMapItem('gainCreators', idx)}
                          className="opacity-0 group-hover:opacity-100 transition-opacity text-red-500 hover:text-red-700"
                          title="Smazat"
                        >
                          <X className="w-4 h-4" />
                        </button>
                      </div>
                      );
                    })}
                    
                    {/* ‚ûï Add new Gain Creator */}
                    <AddItemInput
                      category="gainCreators"
                      placeholder="P≈ôidat tvorbu p≈ô√≠nos≈Ø..."
                      onAdd={(text) => addValueMapItem('gainCreators', text)}
                      color="green"
                    />
                  </div>
                </div>
              </div>
            </div>
            )}

            {/* Navigation */}
            <div ref={navigationRef} className="flex flex-col gap-3">
              {/* Upozornƒõn√≠ pokud nemaj√≠ nic prioritizov√°no */}
              {(() => {
                const hasAnyData = jobs.length > 0 || pains.length > 0 || gains.length > 0;
                const hasAnyPrioritized = topJobs.length > 0 || topPains.length > 0 || topGains.length > 0;
                
                if (!hasAnyData) {
                  // Nemaj√≠ v≈Øbec ≈æ√°dn√° data
                  return (
                    <Alert className="bg-amber-50 border-amber-200">
                      <Info className="h-4 w-4" />
                      <AlertDescription>
                        <strong>‚ö†Ô∏è Chyb√≠ data:</strong> Vra≈•te se do Lekce 1 (Z√°kaznick√Ω profil) a vypl≈àte Jobs, Pains a Gains.
                      </AlertDescription>
                    </Alert>
                  );
                } else if (!hasAnyPrioritized) {
                  // Maj√≠ data, ale nemaj√≠ prioritizaci (count = 0)
                  return (
                    <Alert className="bg-amber-50 border-amber-200">
                      <Info className="h-4 w-4" />
                      <AlertDescription>
                        <strong>üëÜ Zaƒçnƒõte s prioritizac√≠:</strong> Ve Kroku 2 v√Ω≈°e p≈ôepnƒõte na "Z√°kaznick√Ω profil" a zadejte kolik lid√≠ jednotliv√© polo≈æky zmi≈àovalo.
                      </AlertDescription>
                    </Alert>
                  );
                }
                return null;
              })()}
              
              {/* ‚ùå ODSTRANƒöNO - pas√© proto≈æe m≈Ø≈æou editovat na Kroku 2 p≈ô√≠mo */}
              
              {/* Varov√°n√≠ pokud chyb√≠ Value Map data */}
              {(products.length === 0 || painRelievers.length === 0 || gainCreators.length === 0) && (
                <Alert className="bg-amber-50 border-amber-200">
                  <Info className="h-4 w-4" />
                  <AlertDescription className="space-y-3">
                    <div>
                      <strong>‚ö†Ô∏è Chyb√≠ hodnotov√° mapa:</strong> Mus√≠te vyplnit <strong>V≈†ECHNY T≈òI kategorie</strong>: Produkty/Slu≈æby, ≈òe≈°en√≠ obt√≠≈æ√≠ a Tvorba p≈ô√≠nos≈Ø.
                    </div>
                    <div className="flex flex-col sm:flex-row gap-2">
                      <p className="text-sm text-amber-700">
                        M≈Ø≈æete p≈ôidat polo≈æky p≈ô√≠mo v Kroku 2 v√Ω≈°e (p≈ôepnƒõte na "Hodnotov√° mapa"), nebo:
                      </p>
                      {onNavigateToLesson && (
                        <Button
                          size="sm"
                          variant="outline"
                          onClick={() => onNavigateToLesson(15)}
                          className="gap-2 border-amber-300 hover:bg-amber-100 self-start"
                        >
                          <ArrowRight className="w-4 h-4" />
                          P≈ôej√≠t do Lekce 2
                        </Button>
                      )}
                    </div>
                  </AlertDescription>
                </Alert>
              )}
              
              <div className="flex justify-between">
                <Button
                  size="lg"
                  variant="outline"
                  onClick={() => setCurrentStep(1)}
                  className="gap-2"
                >
                  <ArrowLeft className="w-5 h-5" />
                  Zpƒõt
                </Button>
                <Button
                  size="lg"
                  disabled={products.length === 0 || painRelievers.length === 0 || gainCreators.length === 0}
                  onClick={async () => {
                    // üîÑ FORCE RELOAD v≈°ech dat z DB p≈ôed p≈ôechodem na Krok 3!
                    console.log('üîÑ RELOAD dat z DB p≈ôed Krokem 3...');
                    
                    // 1. Ulo≈æ aktu√°ln√≠ data
                    await saveFitProgress();
                    
                    // 2. Nastav loading
                    setIsLoading(true);
                    
                    // 3. Poƒçkej 500ms aby se DB aktualizovala
                    await new Promise(resolve => setTimeout(resolve, 500));
                    
                    // 4. Naƒçti FRESH data z DB
                    const segmentToUse = localSelectedSegment || selectedSegment;
                    
                    const { data: customerProfile } = await supabase
                      .from('value_proposition_canvas')
                      .select('*')
                      .eq('user_id', userId)
                      .eq('segment_name', segmentToUse)
                      .is('selected_value', null)
                      .maybeSingle();
                    
                    if (customerProfile?.fit_progress) {
                      const fp = customerProfile.fit_progress;
                      console.log('‚úÖ Naƒç√≠t√°m FRESH FIT data:', fp);
                      
                      setJobs(fp.jobs.map((j: any, i: number) => ({
                        id: `job-${i}`,
                        text: j.text,
                        count: j.count || 0,
                        percentage: j.percentage || 0,
                        priority: j.priority || i
                      })));
                      
                      setPains(fp.pains.map((p: any, i: number) => ({
                        id: `pain-${i}`,
                        text: p.text,
                        count: p.count || 0,
                        percentage: p.percentage || 0,
                        priority: p.priority || i
                      })));
                      
                      setGains(fp.gains.map((g: any, i: number) => ({
                        id: `gain-${i}`,
                        text: g.text,
                        count: g.count || 0,
                        percentage: g.percentage || 0,
                        priority: g.priority || i
                      })));
                    }
                    
                    setIsLoading(false);
                    
                    // 5. P≈ôejdi na Krok 3
                    console.log('‚úÖ P≈ôechod na Krok 3 s FRESH daty!');
                    setStep3Timestamp(Date.now());
                    setCurrentStep(3);
                    window.scrollTo({ top: 0, behavior: 'smooth' });
                  }}
                  className="gap-2"
                >
                  Pokraƒçovat k validaci
                  <ArrowRight className="w-5 h-5" />
                </Button>
              </div>
            </div>
          </div>
        )}

        {/* STEP 3: FIT VALIDATION */}
        {currentStep === 3 && (
          <div
            className="space-y-6 animate-in fade-in slide-in-from-right-4 duration-300"
          >
            {/* Kompaktn√≠ header s FIT Score - Responzivn√≠ */}
            <div className={`rounded-lg sm:rounded-xl p-4 sm:p-6 ${hasFit ? 'bg-gradient-to-r from-green-50 to-blue-50 border-2 border-green-200' : 'bg-gradient-to-r from-orange-50 to-amber-50 border-2 border-orange-200'}`}>
              <div className="flex flex-col lg:flex-row items-start lg:items-center gap-4 lg:justify-between">
                <div className="flex-1 w-full">
                  <div className="flex items-center gap-2 sm:gap-3 mb-2 sm:mb-3">
                    <Target className={`w-5 h-5 sm:w-6 sm:h-6 ${hasFit ? 'text-green-600' : 'text-orange-600'} flex-shrink-0`} />
                    <h2 className="text-lg sm:text-2xl font-bold text-gray-900">üéØ FIT Validace</h2>
                  </div>
                  <div className="flex flex-col sm:flex-row items-start sm:items-center gap-3 sm:gap-6">
                    <div key={`fit-score-${fitScore}`} className="flex items-baseline gap-2">
                      <span className={`text-3xl sm:text-4xl font-bold ${hasFit ? 'text-green-600' : 'text-orange-600'}`}>{fitScore}%</span>
                      <span className="text-xs sm:text-sm text-gray-600">Product-Market Fit</span>
                    </div>
                    <div className="flex-1 w-full sm:max-w-md">
                      <div className="h-2 sm:h-3 bg-gray-200 rounded-full overflow-hidden">
                        <div
                          key={`progress-${fitScore}`}
                          style={{ width: `${fitScore}%` }}
                          className={`h-full transition-all duration-1000 ease-out ${hasFit ? 'bg-green-500' : 'bg-orange-500'}`}
                        />
                      </div>
                      <p className="text-xs sm:text-sm text-gray-600 mt-1">
                        {hasFit 
                          ? `‚úÖ Pokr√Ωv√°te ${topPains.length > 0 ? Math.round((coveredPainsCount / topPains.length) * 100) : 0}% top probl√©m≈Ø`
                          : '‚ö†Ô∏è Propojte ≈ôe≈°en√≠ s prioritami z√°kazn√≠k≈Ø'}
                      </p>
                    </div>
                  </div>
                </div>
                
                <div className="flex items-center gap-2 w-full sm:w-auto sm:ml-4">
                  <button
                    onClick={async () => {
                      if (!confirm('üîÑ Resetovat FIT data?\n\nToto vyma≈æe v≈°echna propojen√≠ mezi ≈ôe≈°en√≠mi a prioritami pro tento segment. Pou≈æijte kdy≈æ jste zmƒõnili Jobs/Pains/Gains v Lekci 1.')) {
                        return;
                      }
                      
                      try {
                        // Vyma≈æ mappings
                        setPainRelieverMappings({});
                        setGainCreatorMappings({});
                        setProductMappings({});
                        
                        // Vyma≈æ z DB
                        const { error } = await supabase
                          .from('fit_progress')
                          .delete()
                          .eq('user_id', userId)
                          .eq('customer_segment', selectedSegment);
                        
                        if (error) throw error;
                        
                        toast.success('‚úÖ FIT data byla resetov√°na');
                        console.log('üîÑ FIT data resetov√°na pro segment:', selectedSegment);
                      } catch (err) {
                        console.error('Error resetting FIT data:', err);
                        toast.error('‚ùå Chyba p≈ôi resetov√°n√≠ FIT dat');
                      }
                    }}
                    className="px-3 sm:px-4 py-2 bg-amber-500 hover:bg-amber-600 text-white rounded-lg font-medium transition-colors flex items-center gap-1.5 sm:gap-2 text-sm sm:text-base"
                    title="Vymazat star√° FIT data kdy≈æ jste zmƒõnili Customer Profile"
                  >
                    <RotateCcw className="w-3 h-3 sm:w-4 sm:h-4" />
                    <span className="hidden sm:inline">Reset</span>
                  </button>
                  
                  <button
                    onClick={() => {
                      const helpEl = document.getElementById('step3-help');
                      if (helpEl) {
                        helpEl.classList.toggle('hidden');
                      }
                    }}
                    className="px-3 sm:px-4 py-2 bg-white hover:bg-gray-50 text-gray-700 rounded-lg font-medium transition-colors flex items-center gap-1.5 sm:gap-2 text-sm sm:text-base"
                  >
                    <Lightbulb className="w-4 h-4 sm:w-5 sm:h-5" />
                    <span>Help</span>
                  </button>
                </div>
              </div>
            </div>
            
            {/* ‚ÑπÔ∏è Collapsible Help */}
            <div id="step3-help" className="hidden">
              <FitStepInstructions step={3} />
            </div>

            {/* TOP PRIORITIES VALIDATION */}
            <div className="bg-white rounded-xl border-2 border-gray-200 p-8">
              <h3 className="text-2xl font-bold text-gray-900 mb-4">
                üî• Validace TOP priorit
              </h3>
              
              <div className="mb-6 bg-blue-50 border-2 border-blue-200 rounded-xl p-4">
                <div className="flex gap-3">
                  <Info className="w-5 h-5 text-blue-600 flex-shrink-0 mt-0.5" />
                  <div>
                    <p className="text-blue-900 font-bold mb-1">
                      üíé Diamantov√Ω model validace
                    </p>
                    <p className="text-blue-800">
                      Zamƒõ≈ôte se na <strong>TOP priority</strong> z√°kazn√≠k≈Ø. Pro ka≈ædou zkontrolujte jestli m√°te ≈ôe≈°en√≠ v Lekci 2 (Hodnotov√° mapa).
                    </p>
                  </div>
                </div>
              </div>

              {/* ‚ö†Ô∏è EMPTY STATE - ≈Ω√°dn√° prioritizovan√° data */}
              {!hasValidData && (
                <div className="bg-amber-50 border-2 border-amber-300 rounded-xl p-8 text-center">
                  <div className="text-6xl mb-4">üìä</div>
                  <h3 className="text-2xl font-bold text-amber-900 mb-3">
                    ≈Ω√°dn√° prioritizovan√° data
                  </h3>
                  <p className="text-amber-800 mb-4">
                    Vra≈•te se do <strong>Kroku 2: Prioritizace</strong> a vypl≈àte kolik lid√≠ jednotliv√© polo≈æky zmi≈àovalo.
                  </p>
                  <Button
                    size="lg"
                    onClick={() => setCurrentStep(2)}
                    className="gap-2 bg-amber-600 hover:bg-amber-700"
                  >
                    <ArrowLeft className="w-5 h-5" />
                    Zpƒõt k prioritizaci
                  </Button>
                </div>
              )}

              {/* NOV√ù JEDNODUCH√ù DESIGN - V≈°e na jednom m√≠stƒõ */}
              {hasValidData && (
                <div className="space-y-4">
                  <div className="bg-gradient-to-br from-blue-500 to-purple-600 text-white p-4 rounded-lg">
                    <h3 className="font-bold mb-1">üéØ FIT Mapping</h3>
                    <p className="text-white/90 text-xs">Propojte TOP priority s va≈°imi ≈ôe≈°en√≠mi</p>
                  </div>
                    
                  {/* GRID LAYOUT - kompaktn√≠ boxy */}
                  <div className="space-y-6">
                    
                    {/* JOBS SEKCE - zobrazit i kdy≈æ nemaj√≠ produkty */}
                    {topJobs.length > 0 && (
                      <div>
                        <div className="flex items-center gap-2 mb-3 pb-2 border-b-2 border-yellow-300">
                          <Target className="w-5 h-5 text-yellow-600" />
                          <h4 className="font-bold text-yellow-900">üéØ C√≠le/D≈Øvody n√°v≈°tƒõvy</h4>
                          <span className="text-xs text-gray-500 ml-auto">TOP {topJobs.length}</span>
                        </div>
                        
                        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-3">
                          {topJobs.map((job, i) => {
                    const stars = Math.round((job.percentage || 0) / 20);
                    const mappingProducts = products.filter(p => {
                      const pText = typeof p === 'string' ? p : p.text;
                      return (productMappings[pText] || []).includes(job.id);
                    });
                    
                    return (
                      <div key={i} className="bg-yellow-50 rounded-lg border-2 border-yellow-300 p-4">
                        {/* Priorita */}
                        <div className="mb-2">
                          <div className="flex items-start gap-2 mb-1">
                            <span className="font-bold text-yellow-700">#{i + 1}</span>
                            <div className="flex-1">
                              <p className="text-gray-900 mb-0.5">{job.text}</p>
                              <div className="flex items-center gap-1">
                                <span className="text-yellow-600 font-bold">{job.percentage}%</span>
                                <div className="flex gap-0.5">
                                  {[...Array(5)].map((_, idx) => (
                                    <Star 
                                      key={idx} 
                                      className={`w-2.5 h-2.5 ${idx < stars ? 'text-yellow-500 fill-yellow-500' : 'text-gray-300'}`}
                                    />
                                  ))}
                                </div>
                              </div>
                            </div>
                          </div>
                        </div>
                        
                        {/* Checkboxy - INLINE! */}
                        <div className="ml-6 pl-3 border-l-2 border-yellow-300">
                                <p className="text-yellow-800 font-medium mb-2">‚Üí Va≈°e ≈ôe≈°en√≠:</p>
                                <div className="space-y-1.5">
                                  {products.map((product, idx) => {
                                    const productText = typeof product === 'string' ? product : product.text;
                                    const isChecked = (productMappings[productText] || []).includes(job.id);
                                    return (
                                      <label key={idx} className="flex items-start gap-2 cursor-pointer hover:bg-yellow-50 p-1.5 rounded transition-colors">
                                        <input
                                          type="checkbox"
                                          checked={isChecked}
                                          onChange={(e) => {
                                            const currentMappings = productMappings[productText] || [];
                                            const newMappings = e.target.checked
                                              ? [...currentMappings, job.id]
                                              : currentMappings.filter(id => id !== job.id);
                                            
                                            if (newMappings.length > 0) {
                                              setProductMappings({
                                                ...productMappings,
                                                [productText]: newMappings
                                              });
                                            } else {
                                              const updated = { ...productMappings };
                                              delete updated[productText];
                                              setProductMappings(updated);
                                            }
                                          }}
                                          className="mt-0.5 w-3.5 h-3.5 text-green-600 rounded"
                                        />
                                        <span className="text-gray-700 flex-1">{typeof product === 'string' ? product : product.text}</span>
                                      </label>
                                    );
                                  })}
                                </div>
                                
                                {mappingProducts.length > 0 && (
                                  <p className="text-xs text-green-700 font-medium mt-2">
                                    ‚úì Pokryto: {mappingProducts.map(p => typeof p === 'string' ? p : p.text).join(', ')}
                                  </p>
                                )}
                        </div>
                      </div>
                    )
                          })}
                        </div>
                      </div>
                    )}
                    
                    {/* PAINS SEKCE - zobrazit i kdy≈æ nemaj√≠ pain relievers */}
                    {topPains.length > 0 && (
                      <div>
                        <div className="flex items-center gap-2 mb-3 pb-2 border-b-2 border-red-300">
                          <AlertCircle className="w-5 h-5 text-red-600" />
                          <h4 className="font-bold text-red-900">üíä Obavy/Probl√©my</h4>
                          <span className="text-xs text-gray-500 ml-auto">TOP {topPains.length}</span>
                        </div>
                        
                        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-3">
                          {topPains.map((pain, i) => {
                    const stars = Math.round((pain.percentage || 0) / 20);
                    const mappingRelievers = painRelievers.filter(pr => {
                      const prText = typeof pr === 'string' ? pr : pr.text;
                      return (painRelieverMappings[prText] || []).includes(pain.id);
                    });
                    
                    return (
                      <div key={i} className="bg-red-50 rounded-lg border-2 border-red-300 p-4">
                        <div className="mb-2">
                          <div className="flex items-start gap-2 mb-1">
                            <span className="font-bold text-red-700">#{i + 1}</span>
                            <div className="flex-1">
                              <p className="text-gray-900 mb-0.5">{pain.text}</p>
                              <div className="flex items-center gap-1">
                                <span className="text-red-600 font-bold">{pain.percentage}%</span>
                                <div className="flex gap-0.5">
                                  {[...Array(5)].map((_, idx) => (
                                    <Star 
                                      key={idx} 
                                      className={`w-2.5 h-2.5 ${idx < stars ? 'text-red-500 fill-red-500' : 'text-gray-300'}`}
                                    />
                                  ))}
                                </div>
                              </div>
                            </div>
                          </div>
                        </div>
                        
                        {/* Checkboxy - INLINE! */}
                        <div className="ml-6 pl-3 border-l-2 border-red-300">
                                <p className="text-red-800 font-medium mb-2">‚Üí Va≈°e ≈ôe≈°en√≠:</p>
                                <div className="space-y-1.5">
                                  {painRelievers.map((reliever, idx) => {
                                    const relieverText = typeof reliever === 'string' ? reliever : reliever.text;
                                    const isChecked = (painRelieverMappings[relieverText] || []).includes(pain.id);
                                    return (
                                      <label key={idx} className="flex items-start gap-2 cursor-pointer hover:bg-red-50 p-1.5 rounded transition-colors">
                                        <input
                                          type="checkbox"
                                          checked={isChecked}
                                          onChange={(e) => {
                                            const currentMappings = painRelieverMappings[relieverText] || [];
                                            const newMappings = e.target.checked
                                              ? [...currentMappings, pain.id]
                                              : currentMappings.filter(id => id !== pain.id);
                                            
                                            if (newMappings.length > 0) {
                                              setPainRelieverMappings({
                                                ...painRelieverMappings,
                                                [relieverText]: newMappings
                                              });
                                            } else {
                                              const updated = { ...painRelieverMappings };
                                              delete updated[relieverText];
                                              setPainRelieverMappings(updated);
                                            }
                                          }}
                                          className="mt-0.5 w-3.5 h-3.5 text-green-600 rounded"
                                        />
                                        <span className="text-gray-700 flex-1">{typeof reliever === 'string' ? reliever : reliever.text}</span>
                                      </label>
                                    );
                                  })}
                                </div>
                                
                                {mappingRelievers.length > 0 && (
                                  <p className="text-xs text-green-700 font-medium mt-2">
                                    ‚úì Pokryto: {mappingRelievers.map(pr => typeof pr === 'string' ? pr : pr.text).join(', ')}
                                  </p>
                                )}
                              </div>
                            </div>
                          )
                          })}
                        </div>
                      </div>
                    )}
                    
                    {/* GAINS SEKCE - zobrazit i kdy≈æ nemaj√≠ gain creators (aby vidƒõli co chyb√≠!) */}
                    {topGains.length > 0 && (
                      <div>
                        <div className="flex items-center gap-2 mb-3 pb-2 border-b-2 border-green-300">
                          <Star className="w-5 h-5 text-green-600" />
                          <h4 className="font-bold text-green-900">üìà Oƒçek√°v√°n√≠/Touhy</h4>
                          <span className="text-xs text-gray-500 ml-auto">TOP {topGains.length}</span>
                        </div>
                        
                        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-3">
                          {topGains.map((gain, i) => {
                    const stars = Math.round((gain.percentage || 0) / 20);
                    const mappingCreators = gainCreators.filter(gc => {
                      const gcText = typeof gc === 'string' ? gc : gc.text;
                      return (gainCreatorMappings[gcText] || []).includes(gain.id);
                    });
                    
                    return (
                      <div key={i} className="bg-green-50 rounded-lg border-2 border-green-300 p-4">
                        <div className="mb-2">
                          <div className="flex items-start gap-2 mb-1">
                            <span className="font-bold text-green-700">#{i + 1}</span>
                            <div className="flex-1">
                              <p className="text-gray-900 mb-0.5">{gain.text}</p>
                              <div className="flex items-center gap-1">
                                <span className="text-green-600 font-bold">{gain.percentage}%</span>
                                <div className="flex gap-0.5">
                                  {[...Array(5)].map((_, idx) => (
                                    <Star 
                                      key={idx} 
                                      className={`w-2.5 h-2.5 ${idx < stars ? 'text-green-500 fill-green-500' : 'text-gray-300'}`}
                                    />
                                  ))}
                                </div>
                              </div>
                            </div>
                          </div>
                        </div>
                        
                        {/* Checkboxy - INLINE! */}
                        <div className="ml-6 pl-3 border-l-2 border-green-300">
                                <p className="text-green-800 font-medium mb-2">‚Üí Va≈°e ≈ôe≈°en√≠:</p>
                                
                                {gainCreators.length === 0 ? (
                                  <div className="bg-yellow-50 border border-yellow-300 rounded-lg p-3 text-center">
                                    <p className="text-yellow-800 mb-2">‚ö†Ô∏è Nem√°te ≈æ√°dnou tvorbu p≈ô√≠nos≈Ø!</p>
                                    <button
                                      onClick={() => {
                                        setCurrentStep(2);
                                        setStep2View('value');
                                      }}
                                      className="text-blue-600 hover:text-blue-700 underline"
                                    >
                                      P≈ôidat v Kroku 2
                                    </button>
                                  </div>
                                ) : (
                                <>
                                <div className="space-y-1.5">
                                  {gainCreators.map((creator, idx) => {
                                    const creatorText = typeof creator === 'string' ? creator : creator.text;
                                    const isChecked = (gainCreatorMappings[creatorText] || []).includes(gain.id);
                                    return (
                                      <label key={idx} className="flex items-start gap-2 cursor-pointer hover:bg-green-50 p-1.5 rounded transition-colors">
                                        <input
                                          type="checkbox"
                                          checked={isChecked}
                                          onChange={(e) => {
                                            const currentMappings = gainCreatorMappings[creatorText] || [];
                                            const newMappings = e.target.checked
                                              ? [...currentMappings, gain.id]
                                              : currentMappings.filter(id => id !== gain.id);
                                            
                                            if (newMappings.length > 0) {
                                              setGainCreatorMappings({
                                                ...gainCreatorMappings,
                                                [creatorText]: newMappings
                                              });
                                            } else {
                                              const updated = { ...gainCreatorMappings };
                                              delete updated[creatorText];
                                              setGainCreatorMappings(updated);
                                            }
                                          }}
                                          className="mt-0.5 w-3.5 h-3.5 text-green-600 rounded"
                                        />
                                        <span className="text-gray-700 flex-1">{typeof creator === 'string' ? creator : creator.text}</span>
                                      </label>
                                    );
                                  })}
                                </div>
                                
                                {mappingCreators.length > 0 && (
                                  <p className="text-xs text-green-700 font-medium mt-2">
                                    ‚úì Pokryto: {mappingCreators.map(gc => typeof gc === 'string' ? gc : gc.text).join(', ')}
                                  </p>
                                )}
                                </>
                                )}
                              </div>
                        </div>
                          );
                          })}
                        </div>
                      </div>
                    )}
                  
                  </div>
                  {/* V≈°echny sekce uzav≈ôeny */}
                  
                  {/* Pokud nem√° ≈æ√°dn√° ≈ôe≈°en√≠ */}
                  {products.length === 0 && painRelievers.length === 0 && gainCreators.length === 0 && (
                    <div className="bg-amber-50 border-2 border-amber-300 rounded-xl p-6 text-center">
                      <p className="text-amber-900 font-bold mb-2">‚ö†Ô∏è Chyb√≠ ≈ôe≈°en√≠!</p>
                      <p className="text-sm text-amber-800">
                        Vra≈•te se do Lekce 2 a vypl≈àte va≈°i Hodnotovou mapu.
                      </p>
                    </div>
                  )}
                </div>
              )}
            </div>

            {/* V√ùSLEDKY VALIDACE */}
            {fitScore >= 70 ? (
              // SUCCESS STATE - FIT Score >= 70%
              <div className="bg-green-50 border-l-4 border-green-500 p-6 rounded-xl">
                <h4 className="font-bold text-green-900 mb-3">üëè Skvƒõl√° pr√°ce! M√°te validovan√Ω FIT!</h4>
                
                <div className="bg-white p-4 rounded-lg border border-green-200 mb-4">
                  <div className="grid grid-cols-3 gap-4 text-center text-sm">
                    <div>
                      <div className="font-bold text-green-700">Jobs: {coveredJobsCount}/{topJobs.length}</div>
                      <div className="text-xs text-gray-600">pokryto</div>
                    </div>
                    <div>
                      <div className="font-bold text-green-700">Pains: {coveredPainsCount}/{topPains.length}</div>
                      <div className="text-xs text-gray-600">pokryto</div>
                    </div>
                    <div>
                      <div className="font-bold text-green-700">Gains: {coveredGainsCount}/{topGains.length}</div>
                      <div className="text-xs text-gray-600">pokryto</div>
                    </div>
                  </div>
                </div>
                
                <div className="space-y-2 text-sm text-green-800">
                  <p><strong>‚úÖ Co jste zjistili:</strong></p>
                  <ul className="space-y-1 ml-4">
                    <li>‚Ä¢ Va≈°e ≈ôe≈°en√≠ pokr√Ωv√° vƒõt≈°inu TOP priorit z√°kazn√≠k≈Ø</li>
                    <li>‚Ä¢ M√°te dobr√Ω soulad mezi nab√≠dkou a segmentem</li>
                    <li>‚Ä¢ Progress je automaticky ulo≈æen</li>
                  </ul>
                </div>
                
                {/* Show nepokryt√© pokud nƒõjak√© jsou */}
                {(coveredJobsCount < topJobs.length || coveredPainsCount < topPains.length || coveredGainsCount < topGains.length) && (
                  <details className="mt-4 bg-yellow-50 border border-yellow-300 rounded-lg p-3">
                    <summary className="text-xs text-yellow-800 font-bold cursor-pointer hover:text-yellow-900">
                      üí° {(topJobs.length - coveredJobsCount) + (topPains.length - coveredPainsCount) + (topGains.length - coveredGainsCount)}√ó TOP priorita nen√≠ pokryta (kliknƒõte pro detail)
                    </summary>
                    <div className="mt-3 space-y-2 text-xs text-yellow-700">
                      {coveredJobsCount < topJobs.length && (
                        <div>
                          <p className="font-bold">‚ùå Jobs ({topJobs.length - coveredJobsCount}√ó nepokryto):</p>
                          <ul className="ml-4 list-disc space-y-1">
                            {topJobs.filter((job) => {
                              const isLinkedToProduct = Object.values(productMappings).some(arr => arr.includes(job.id));
                              return !isLinkedToProduct;
                            }).map((job, i) => (
                              <li key={i}>{job.text} ({job.percentage}% lid√≠)</li>
                            ))}
                          </ul>
                        </div>
                      )}
                      {coveredPainsCount < topPains.length && (
                        <div>
                          <p className="font-bold">‚ùå Pains ({topPains.length - coveredPainsCount}√ó nepokryto):</p>
                          <ul className="ml-4 list-disc space-y-1">
                            {topPains.filter((pain) => {
                              const isLinked = Object.values(painRelieverMappings).some(arr => arr.includes(pain.id));
                              return !isLinked;
                            }).map((pain, i) => (
                              <li key={i}>{pain.text} ({pain.percentage}% lid√≠)</li>
                            ))}
                          </ul>
                        </div>
                      )}
                      {coveredGainsCount < topGains.length && (
                        <div>
                          <p className="font-bold">‚ùå Gains ({topGains.length - coveredGainsCount}√ó nepokryto):</p>
                          <ul className="ml-4 list-disc space-y-1">
                            {topGains.filter((gain) => {
                              const isLinked = Object.values(gainCreatorMappings).some(arr => arr.includes(gain.id));
                              return !isLinked;
                            }).map((gain, i) => (
                              <li key={i}>{gain.text} ({gain.percentage}% lid√≠)</li>
                            ))}
                          </ul>
                        </div>
                      )}
                    </div>
                  </details>
                )}
              </div>
            ) : (
              // NEEDS WORK - FIT Score < 70%
              <div className="bg-amber-50 border-l-4 border-amber-500 p-6 rounded-xl">
                <h4 className="font-bold text-amber-900 mb-3">üìä FIT Score: {fitScore}%</h4>
                
                <div className="bg-white p-4 rounded-lg border border-amber-200 mb-4">
                  <div className="grid grid-cols-3 gap-4 text-center text-sm">
                    <div>
                      <div className={`font-bold ${coveredJobsCount === topJobs.length ? 'text-green-700' : 'text-amber-700'}`}>
                        Jobs: {coveredJobsCount}/{topJobs.length}
                      </div>
                      <div className="text-xs text-gray-600">pokryto</div>
                    </div>
                    <div>
                      <div className={`font-bold ${coveredPainsCount === topPains.length ? 'text-green-700' : 'text-amber-700'}`}>
                        Pains: {coveredPainsCount}/{topPains.length}
                      </div>
                      <div className="text-xs text-gray-600">pokryto</div>
                    </div>
                    <div>
                      <div className={`font-bold ${coveredGainsCount === topGains.length ? 'text-green-700' : 'text-amber-700'}`}>
                        Gains: {coveredGainsCount}/{topGains.length}
                      </div>
                      <div className="text-xs text-gray-600">pokryto</div>
                    </div>
                  </div>
                </div>
                
                <div className="space-y-3 text-sm text-amber-900">
                  <p><strong>üí° Co to znamen√°:</strong></p>
                  <p className="text-amber-800">
                    Va≈°e nab√≠dka nepokr√Ωv√° vƒõt≈°inu TOP priorit z√°kazn√≠k≈Ø. 
                    To je OK - nyn√≠ v√≠te <strong>CO je pot≈ôeba zlep≈°it!</strong>
                  </p>
                  
                  <details className="bg-white border border-amber-200 rounded-lg p-3">
                    <summary className="font-bold text-amber-900 cursor-pointer hover:text-amber-950">
                      ‚ùå Celkem {(topJobs.length - coveredJobsCount) + (topPains.length - coveredPainsCount) + (topGains.length - coveredGainsCount)} TOP priorit bez ≈ôe≈°en√≠ (kliknƒõte pro detail)
                    </summary>
                    <div className="mt-3 space-y-2 text-xs text-amber-700">
                      {coveredJobsCount < topJobs.length && (
                        <div>
                          <p className="font-bold">‚ùå Jobs ({topJobs.length - coveredJobsCount}√ó nepokryto):</p>
                          <ul className="ml-4 list-disc space-y-1">
                            {topJobs.filter((job) => {
                              const isLinkedToProduct = Object.values(productMappings).some(arr => arr.includes(job.id));
                              return !isLinkedToProduct;
                            }).map((job, i) => (
                              <li key={i}>{job.text} ({job.percentage}% lid√≠) ‚Üí ≈æ√°dn√Ω produkt/slu≈æba</li>
                            ))}
                          </ul>
                        </div>
                      )}
                      {coveredPainsCount < topPains.length && (
                        <div>
                          <p className="font-bold">‚ùå Pains ({topPains.length - coveredPainsCount}√ó nepokryto):</p>
                          <ul className="ml-4 list-disc space-y-1">
                            {topPains.filter((pain) => {
                              const isLinked = Object.values(painRelieverMappings).some(arr => arr.includes(pain.id));
                              return !isLinked;
                            }).map((pain, i) => (
                              <li key={i}>{pain.text} ({pain.percentage}% lid√≠) ‚Üí chyb√≠ Pain Reliever</li>
                            ))}
                          </ul>
                        </div>
                      )}
                      {coveredGainsCount < topGains.length && (
                        <div>
                          <p className="font-bold">‚ùå Gains ({topGains.length - coveredGainsCount}√ó nepokryto):</p>
                          <ul className="ml-4 list-disc space-y-1">
                            {topGains.filter((gain) => {
                              const isLinked = Object.values(gainCreatorMappings).some(arr => arr.includes(gain.id));
                              return !isLinked;
                            }).map((gain, i) => (
                              <li key={i}>{gain.text} ({gain.percentage}% lid√≠) ‚Üí chyb√≠ Gain Creator</li>
                            ))}
                          </ul>
                        </div>
                      )}
                      <p className="mt-3 pt-3 border-t border-amber-200">
                        üí° <strong>Co d√°l:</strong> Vra≈•te se do kroku 2 a zkontrolujte mapov√°n√≠, nebo p≈ôidejte chybƒõj√≠c√≠ ≈ôe≈°en√≠ do hodnotov√© mapy.
                      </p>
                    </div>
                  </details>
                </div>
              </div>
            )}

            {/* Navigation */}
            <div className="flex flex-col gap-3">
              <div className="flex flex-col sm:flex-row justify-between items-stretch sm:items-center gap-3">
                <div className="flex flex-col sm:flex-row gap-3 flex-1">
                  <Button
                    size="lg"
                    variant="outline"
                    onClick={() => setCurrentStep(2)}
                    className="gap-2 flex-1 sm:flex-none"
                  >
                    <ArrowLeft className="w-5 h-5" />
                    <span className="hidden sm:inline">Upravit prioritizaci</span>
                    <span className="sm:hidden">Upravit</span>
                  </Button>
                  
                  <Button
                    size="lg"
                    variant="outline"
                    onClick={loadVPC}
                    className="gap-2 flex-1 sm:flex-none"
                  >
                    <RefreshCw className="w-4 h-4" />
                    Naƒç√≠st znovu
                  </Button>
                </div>
                
                {/* Tlaƒç√≠tko "Ulo≈æit a dokonƒçit" JEN pokud lekce NEN√ç dokonƒçen√° */}
                {!isLessonCompleted && (
                  <Button
                    size="lg"
                    onClick={async () => {
                      await saveFitProgress();
                      
                      // üèÜ Trigger achievement - FIT Validator dokonƒçen!
                      if (onAchievementUnlocked) {
                        // üéØ ODEMKNI AKƒåN√ç PL√ÅN!
                        onAchievementUnlocked('action-plan-unlocked');
                      }
                      
                      // üéâ Zavolej onComplete callback s FIT Score
                      if (onComplete) {
                        onComplete(fitScore);
                      }
                      
                      // üìã TOAST: Akƒçn√≠ pl√°n odemknut!
                      toast.success('üéâ Gratulujeme! Odemkl jsi Akƒçn√≠ pl√°n!', {
                        description: 'Najde≈° ho v sidebaru v sekci "Tools" ‚Üí "Akƒçn√≠ pl√°n"',
                        duration: 6000,
                      });
                    }}
                    className="gap-2 bg-green-600 hover:bg-green-700 w-full sm:w-auto"
                  >
                    <CheckCircle className="w-5 h-5" />
                    Ulo≈æit a dokonƒçit
                  </Button>
                )}
                
                {/* Kdy≈æ je lekce dokonƒçen√°, uka≈æ jen info */}
                {isLessonCompleted && (
                  <div className="bg-green-50 border-2 border-green-300 rounded-lg px-6 py-3 flex items-center gap-2">
                    <CheckCircle className="w-5 h-5 text-green-600" />
                    <span className="text-green-800 font-medium">Lekce dokonƒçena ‚úÖ</span>
                  </div>
                )}
              </div>
              
              <div className="bg-blue-50 border border-blue-200 rounded-lg p-3 text-center">
                <p className="text-xs text-blue-800">
                  üíæ Zmƒõny se ukl√°daj√≠ automaticky ka≈æd√© 2 sekundy
                </p>
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  );
}

// Step Indicator Component
function StepIndicator({ 
  number, 
  title, 
  isActive,
  isComplete 
}: { 
  number: number; 
  title: string; 
  isActive: boolean; 
  isComplete: boolean;
}) {
  return (
    <div className="flex flex-col items-center gap-2">
      <div 
        className={`
          w-12 h-12 rounded-full flex items-center justify-center font-bold text-lg
          ${isActive ? 'bg-blue-500 text-white ring-4 ring-blue-200' : ''}
          ${isComplete ? 'bg-green-500 text-white' : ''}
          ${!isActive && !isComplete ? 'bg-gray-200 text-gray-500' : ''}
        `}
      >
        {isComplete ? <CheckCircle className="w-6 h-6" /> : number}
      </div>
      <p className={`text-sm font-medium ${isActive ? 'text-blue-600' : 'text-gray-600'}`}>
        {title}
      </p>
    </div>
  );
}

export default FitValidatorV2;
