/**
 * üì± MOBILE BUSINESS MODEL GALLERY
 * 
 * Mobile-first komponenta pro lekci 13 - P≈ô√≠klady √∫spƒõ≈°n√Ωch model≈Ø
 * SYNCHRONIZED s desktop verz√≠ (BusinessModelGallery.tsx)
 * 
 * FEATURES:
 * - 6 re√°ln√Ωch model≈Ø (Kav√°rna A+B, Pizzerie A+B, Fitness A+B)
 * - Mini Canvas preview s BARVAMI (segmenty + hodnoty)
 * - Kl√≠ƒçov√© insights
 * - Swipeable karty + filtr
 */

import { useState } from 'react';
import { ChevronLeft, ChevronRight, Filter, Lightbulb, TrendingUp } from 'lucide-react';
import { Button } from './ui/button';
import { haptic } from '../lib/haptics';

interface MobileBusinessModelGalleryProps {
  onComplete?: () => void;
  onNavigateNext?: () => void;
}

interface BusinessModel {
  id: string;
  name: string;
  version: string;
  category: string;
  emoji: string;
  description: string;
  segments: Array<{ text: string; color: string }>;
  value: Array<{ text: string; color: string }>;
  insights: {
    crossSell: string;
    whyItWorks: string;
  };
}

// üîÑ SYNCHRONIZED s BusinessModelGallery.tsx
const BUSINESS_MODELS: BusinessModel[] = [
  // ‚òï KAV√ÅRNA - VERZE A: Coworkingov√Ω model
  {
    id: 'cafe-a',
    name: 'Kav√°rna',
    version: 'A - Coworkingov√Ω prostor',
    category: 'Kav√°rny',
    emoji: '‚òï',
    description: 'Kav√°rna jako coworking prostor pro freelancery',
    segments: [
      { text: 'Freelance≈ôi (coworking)', color: 'blue' },
      { text: 'Studenti (p≈ô√≠prava)', color: 'green' }
    ],
    value: [
      { text: 'Coworking cel√Ω den + WiFi', color: 'blue' },
      { text: 'Tich√° m√≠sta pro uƒçen√≠', color: 'green' }
    ],
    insights: {
      crossSell: 'üç∞ Dezerty k rann√≠ k√°vƒõ ‚Üí 10% tr≈æeb (mar≈æe 70%!) - kdo sed√≠ 4 hodiny, koup√≠ si 2-3 dezerty',
      whyItWorks: 'üí° Freelance≈ôi pot≈ôebuj√≠ workspace, ale coworking je drah√Ω (3.000-8.000 Kƒç/mƒõs√≠c) ‚Üí kav√°rna je levnƒõj≈°√≠ ≈ôe≈°en√≠ (k√°va za 60 Kƒç + cel√Ω den internet zdarma) + soci√°ln√≠ prost≈ôed√≠ zdarma'
    }
  },

  // ‚òï KAV√ÅRNA - VERZE B: Rychl√° kav√°rna
  {
    id: 'cafe-b',
    name: 'Kav√°rna',
    version: 'B - Rychl√° kav√°rna',
    category: 'Kav√°rny',
    emoji: '‚òï',
    description: 'Rychl√° kav√°rna na ru≈°n√© k≈ôi≈æovatce (to-go model)',
    segments: [
      { text: 'Rann√≠ doj√≠≈ædƒõj√≠c√≠', color: 'blue' },
      { text: 'Obƒõdov√° pauza (office)', color: 'green' }
    ],
    value: [
      { text: 'K√°va za 2 min (r√°no)', color: 'blue' },
      { text: 'Express obƒõdy (lunch)', color: 'green' }
    ],
    insights: {
      crossSell: 'ü•ñ Bagety a dezerty k rann√≠ k√°vƒõ ‚Üí 10% tr≈æeb (vysok√° mar≈æe 65%) - "d√°te si k tomu nƒõco?" p≈ôi platbƒõ',
      whyItWorks: '‚ö° Rychlost + n√°vyk = loajalita. Lidi si vytvo≈ô√≠ rann√≠ ritu√°l (stejn√° kav√°rna, stejn√Ω ƒças) ‚Üí kdy≈æ v√≠≈° ≈æe bude≈° hotov√Ω za 2 minuty, vrac√≠≈° se ka≈æd√© r√°no. Premium lokace = plat√≠ se v√≠c, ale obrat je 3x vy≈°≈°√≠'
    }
  },

  // üçï PIZZERIE - VERZE A: S rozvozem
  {
    id: 'pizza-a',
    name: 'Pizzerie',
    version: 'A - S rozvozem',
    category: 'Restaurace',
    emoji: 'üçï',
    description: 'Pizzerie s rozvozem a osobn√≠m odbƒõrem',
    segments: [
      { text: 'Rodiny s dƒõtmi (veƒçe≈ôe)', color: 'blue' },
      { text: 'Studenti v kolej√≠ch', color: 'green' }
    ],
    value: [
      { text: 'Rozvoz do 30 min', color: 'blue' },
      { text: '20% sleva p≈ôi odbƒõru', color: 'global' }
    ],
    insights: {
      crossSell: 'üí∞ 20% sleva na odbƒõr ‚Üí 40% z√°kazn√≠k≈Ø si vybere odbƒõr = √∫spora n√°klad≈Ø na rozvoz (≈ôidiƒç + benz√≠n + doba) = mar≈æe +15%',
      whyItWorks: 'üéØ Jeden produkt, dva segmenty s r≈Øzn√Ωmi prioritami: (1) Rodiƒçe ‚Üí pohodl√≠ veƒçer (nechce se jim va≈ôit po pr√°ci), plat√≠ plnou cenu za rozvoz. (2) Studenti ‚Üí cena (chtƒõj√≠ u≈°et≈ôit), p≈ôijdou si vyzvednout za slevu. Obƒõ skupiny chtƒõj√≠ pizzu, jen z jin√Ωch d≈Øvod≈Ø'
    }
  },

  // üçï PIZZERIE - VERZE B: Pr√©miov√°
  {
    id: 'pizza-b',
    name: 'Pizzerie',
    version: 'B - Pr√©miov√°',
    category: 'Restaurace',
    emoji: 'üçï',
    description: '≈òemesln√° pizzerie s unik√°tn√≠mi ingrediencemi',
    segments: [
      { text: 'Foodie (IG influence≈ôi)', color: 'blue' },
      { text: 'Mlad√≠ profesion√°lov√©', color: 'green' }
    ],
    value: [
      { text: 'Limitovan√© edice (mƒõs√≠ƒçn√≠)', color: 'blue' },
      { text: 'Craft pivo pairing', color: 'green' }
    ],
    insights: {
      crossSell: 'üç∫ Craft pivo pairing (doporuƒçen√≠ konkr√©tn√≠ho piva ke ka≈æd√© pizzƒõ, jako v√≠no k j√≠dlu) ‚Üí 25% tr≈æeb (mar≈æe 70%!) - z√°kazn√≠k si koup√≠ "z√°≈æitek", ne jen pivo',
      whyItWorks: 'üì∏ Instagram je tv≈Øj hlavn√≠ prodejce: Fotogenick√° j√≠dla + pr√©miov√Ω prostor = foodie to sd√≠lej√≠ zadarmo (vir√°ln√≠ marketing) ‚Üí p≈ôiv√°d√≠ nov√© z√°kazn√≠ky bez placen√© reklamy. Foodie segment m√° pen√≠ze a ne≈ôe≈°√≠ cenu, kdy≈æ je to "unik√°tn√≠ z√°≈æitek"'
    }
  },

  // üèãÔ∏è FITNESS - VERZE A: Osobn√≠ tr√©ninky
  {
    id: 'fitness-a',
    name: 'Fitness',
    version: 'A - Osobn√≠ tr√©ninky',
    category: 'Fitness',
    emoji: 'üèãÔ∏è',
    description: 'Boutique studio s osobn√≠mi tren√©ry',
    segments: [
      { text: 'Profesion√°lov√© 35-50 let', color: 'blue' },
      { text: 'Post-rehab klienti', color: 'green' }
    ],
    value: [
      { text: 'Osobn√≠ tr√©nink 1-na-1', color: 'blue' },
      { text: 'V√Ω≈æivov√Ω pl√°n', color: 'blue' },
      { text: 'Rehabilitaƒçn√≠ p√©ƒçe', color: 'green' }
    ],
    insights: {
      crossSell: 'üíä Suplementy po tr√©ninku ‚Üí 20% tr≈æeb (mar≈æe 60%!) - tren√©r ti p≈ô√≠mo doporuƒç√≠ co pot≈ôebuje≈° = osobn√≠ p≈ô√≠stup zvy≈°uje prodeje',
      whyItWorks: '‚è∞ Profesion√°lov√© 35-50 let maj√≠ pen√≠ze, ale NE ƒças: (1) Nemohou si dovolit zranƒõn√≠ (pr√°ce = priorita) ‚Üí plat√≠ za bezpeƒçn√Ω tr√©nink pod dohledem. (2) Nechtƒõj√≠ ztr√°cet ƒças hled√°n√≠m cviƒçen√≠ online ‚Üí plat√≠ za hotov√Ω pl√°n "na m√≠ru". ƒåas > pen√≠ze pro tento segment'
    }
  },

  // üèãÔ∏è FITNESS - VERZE B: Skupinov√© lekce
  {
    id: 'fitness-b',
    name: 'Fitness',
    version: 'B - Skupinov√© lekce',
    category: 'Fitness',
    emoji: 'üèãÔ∏è',
    description: 'Velk√© studio se skupinov√Ωmi lekcemi',
    segments: [
      { text: 'Mlad√≠ lid√© 20-35 let', color: 'blue' },
      { text: '≈Ωeny (r√°no/odpoledne)', color: 'green' }
    ],
    value: [
      { text: 'Skupinov√© lekce', color: 'blue' },
      { text: 'Rann√≠ j√≥ga (≈æeny)', color: 'green' }
    ],
    insights: {
      crossSell: 'üëï Merch a ≈°ejkry ‚Üí 10% tr≈æeb (mar≈æe 70%) - komunita nos√≠ tvoje logo = branding zdarma + pocit p≈ô√≠slu≈°nosti',
      whyItWorks: 'ü§ù Mlad√≠ lid√© 20-35 let chtƒõj√≠ soci√°ln√≠ z√°≈æitek, ne jen cviƒçen√≠: P≈ôijdou na lekci, poznaj√≠ k√°mo≈°e, vrac√≠ se kv≈Øli p≈ô√°tel≈Øm (ne kv≈Øli fitness!). Skupinov√© lekce = z√°bava + motivace + community. Kdy≈æ m√° nƒõkdo partu ve fitku, neodch√°z√≠ ‚Üí retention 70%'
    }
  }
];

const CATEGORIES = [
  { id: 'Kav√°rny', name: 'Kav√°rny', emoji: '‚òï' },
  { id: 'Restaurace', name: 'Pizzerie', emoji: 'üçï' },
  { id: 'Fitness', name: 'Fitness', emoji: 'üèãÔ∏è' }
];

// Helper pro barvy
const getColorClasses = (color: string) => {
  const colors: Record<string, { bg: string; text: string; border: string }> = {
    blue: { bg: 'bg-blue-100', text: 'text-blue-900', border: 'border-blue-300' },
    green: { bg: 'bg-green-100', text: 'text-green-900', border: 'border-green-300' },
    yellow: { bg: 'bg-yellow-100', text: 'text-yellow-900', border: 'border-yellow-300' },
    purple: { bg: 'bg-purple-100', text: 'text-purple-900', border: 'border-purple-300' },
    pink: { bg: 'bg-pink-100', text: 'text-pink-900', border: 'border-pink-300' },
    global: { bg: 'bg-gray-100', text: 'text-gray-900', border: 'border-gray-300' },
  };
  return colors[color] || colors.global;
};

export function MobileBusinessModelGallery({ onComplete, onNavigateNext }: MobileBusinessModelGalleryProps) {
  const [selectedCategory, setSelectedCategory] = useState<string>('Kav√°rny');
  const [currentModelIndex, setCurrentModelIndex] = useState(0);
  const [touchStart, setTouchStart] = useState(0);
  const [touchEnd, setTouchEnd] = useState(0);

  // Filter models by category
  const filteredModels = BUSINESS_MODELS.filter(m => m.category === selectedCategory);
  const currentModel = filteredModels[currentModelIndex];

  const hasPrevious = currentModelIndex > 0;
  const hasNext = currentModelIndex < filteredModels.length - 1;

  const handlePrevious = () => {
    if (hasPrevious) {
      haptic('light');
      setCurrentModelIndex(prev => prev - 1);
    }
  };

  const handleNext = () => {
    if (hasNext) {
      haptic('light');
      setCurrentModelIndex(prev => prev + 1);
    }
  };

  const handleCategoryChange = (categoryId: string) => {
    haptic('light');
    setSelectedCategory(categoryId);
    setCurrentModelIndex(0); // Reset to first model in new category
  };

  // Touch handlers for swipe
  const handleTouchStart = (e: React.TouchEvent) => {
    setTouchStart(e.targetTouches[0].clientX);
  };

  const handleTouchMove = (e: React.TouchEvent) => {
    setTouchEnd(e.targetTouches[0].clientX);
  };

  const handleTouchEnd = () => {
    if (!touchStart || !touchEnd) return;
    
    const distance = touchStart - touchEnd;
    const isLeftSwipe = distance > 50;
    const isRightSwipe = distance < -50;

    if (isLeftSwipe && hasNext) {
      handleNext();
    }
    if (isRightSwipe && hasPrevious) {
      handlePrevious();
    }

    setTouchStart(0);
    setTouchEnd(0);
  };

  if (!currentModel) return null;

  return (
    <div className="space-y-4">
      {/* Header */}
      <div className="bg-gradient-to-br from-indigo-500 to-purple-600 rounded-2xl shadow-md p-6 text-center">
        <h2 className="mb-2 text-white">üí° Galerie Business Model≈Ø</h2>
        <p className="text-indigo-50 text-sm">
          Porovnejte r≈Øzn√© strategie - ka≈æd√Ω model funguje jinak!
        </p>
      </div>

      {/* Category Filter */}
      <div className="bg-white rounded-2xl shadow-sm border border-gray-200 p-4">
        <div className="flex items-center gap-2 mb-3">
          <Filter className="w-4 h-4 text-gray-600" />
          <p className="text-sm font-medium text-gray-700">Kategorie:</p>
        </div>
        <div className="flex gap-2">
          {CATEGORIES.map(category => (
            <button
              key={category.id}
              onClick={() => handleCategoryChange(category.id)}
              className={`flex-1 px-4 py-2 rounded-full text-sm transition-all ${
                selectedCategory === category.id
                  ? 'bg-indigo-500 text-white shadow-md'
                  : 'bg-gray-100 text-gray-700 hover:bg-gray-200'
              }`}
            >
              <span className="text-lg mr-1">{category.emoji}</span>
              {category.name}
            </button>
          ))}
        </div>
      </div>

      {/* Model Card */}
      <div 
        className="bg-white rounded-2xl shadow-sm border border-gray-200 p-6"
        onTouchStart={handleTouchStart}
        onTouchMove={handleTouchMove}
        onTouchEnd={handleTouchEnd}
      >
        {/* Card Header */}
        <div className="text-center mb-5">
          <div className="text-6xl mb-3">{currentModel.emoji}</div>
          <h3 className="text-xl font-bold text-gray-900 mb-1">{currentModel.name}</h3>
          <p className="text-sm text-indigo-600 font-medium mb-2">{currentModel.version}</p>
          <p className="text-sm text-gray-600 mb-3">{currentModel.description}</p>
          <p className="text-xs text-indigo-600 font-medium">
            {currentModelIndex + 1} / {filteredModels.length}
          </p>
        </div>

        {/* üé® MINI CANVAS - Segmenty + Hodnoty s BARVAMI! */}
        <div className="bg-gradient-to-br from-gray-50 to-gray-100 rounded-xl p-4 mb-5 border-2 border-gray-200">
          <h4 className="text-sm font-bold text-gray-900 mb-3 flex items-center gap-2">
            <span>üé®</span>
            Model Canvas:
          </h4>
          
          {/* Segments */}
          <div className="mb-4">
            <p className="text-xs font-bold text-gray-700 mb-2">üë• Z√°kaznick√© segmenty:</p>
            <div className="space-y-2">
              {currentModel.segments.map((segment, idx) => {
                const colors = getColorClasses(segment.color);
                return (
                  <div
                    key={idx}
                    className={`${colors.bg} ${colors.text} border ${colors.border} rounded-lg p-2 text-xs font-medium`}
                  >
                    {segment.text}
                  </div>
                );
              })}
            </div>
          </div>

          {/* Value Propositions */}
          <div>
            <p className="text-xs font-bold text-gray-700 mb-2">üíé Hodnotov√° nab√≠dka:</p>
            <div className="space-y-2">
              {currentModel.value.map((value, idx) => {
                const colors = getColorClasses(value.color);
                return (
                  <div
                    key={idx}
                    className={`${colors.bg} ${colors.text} border ${colors.border} rounded-lg p-2 text-xs font-medium`}
                  >
                    {value.text}
                  </div>
                );
              })}
            </div>
          </div>
        </div>

        {/* üí° KL√çƒåOV√â INSIGHTS */}
        <div className="space-y-3">
          {/* Cross-sell */}
          <div className="bg-gradient-to-br from-green-50 to-green-100 border-2 border-green-400 rounded-xl p-4">
            <div className="flex items-start gap-2">
              <TrendingUp className="w-5 h-5 text-green-700 mt-0.5 flex-shrink-0" />
              <div>
                <p className="text-green-900 font-bold text-xs mb-1">CROSS-SELL P≈ò√çLE≈ΩITOST:</p>
                <p className="text-green-900 text-sm leading-relaxed">
                  {currentModel.insights.crossSell}
                </p>
              </div>
            </div>
          </div>

          {/* Why it works */}
          <div className="bg-gradient-to-br from-blue-50 to-blue-100 border-2 border-blue-400 rounded-xl p-4">
            <div className="flex items-start gap-2">
              <Lightbulb className="w-5 h-5 text-blue-700 mt-0.5 flex-shrink-0" />
              <div>
                <p className="text-blue-900 font-bold text-xs mb-1">PROƒå TO FUNGUJE:</p>
                <p className="text-blue-900 text-sm leading-relaxed">
                  {currentModel.insights.whyItWorks}
                </p>
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* Navigation */}
      <div className="flex items-center justify-between gap-4">
        <Button
          variant="outline"
          size="lg"
          onClick={handlePrevious}
          disabled={!hasPrevious}
          className="flex-1"
        >
          <ChevronLeft className="w-5 h-5 mr-1" />
          P≈ôedchoz√≠
        </Button>

        <Button
          variant="outline"
          size="lg"
          onClick={handleNext}
          disabled={!hasNext}
          className="flex-1"
        >
          Dal≈°√≠
          <ChevronRight className="w-5 h-5 ml-1" />
        </Button>
      </div>

      {/* Complete button (only on last card in last category) */}
      {selectedCategory === CATEGORIES[CATEGORIES.length - 1].id && 
       currentModelIndex === filteredModels.length - 1 && (
        <div className="pt-4">
          <Button
            size="lg"
            className="w-full bg-gradient-to-r from-green-500 to-emerald-600 hover:from-green-600 hover:to-emerald-700 text-white"
            onClick={() => {
              haptic('success');
              if (onComplete) onComplete();
              if (onNavigateNext) onNavigateNext();
            }}
          >
            ‚úÖ Dokonƒçit lekci
          </Button>
        </div>
      )}

      {/* Swipe hint */}
      <p className="text-center text-xs text-gray-500">
        üí° Swipe doleva/doprava pro navigaci
      </p>
    </div>
  );
}
