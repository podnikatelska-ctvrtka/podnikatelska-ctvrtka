import { useState, useEffect } from "react";
import { motion, AnimatePresence } from "motion/react";
import { CheckCircle, XCircle, AlertTriangle, Lightbulb, ArrowRight, Sparkles, Eye, EyeOff } from "lucide-react";
import { Button } from "./ui/button";
import { supabase } from "../lib/supabase";
import { toast } from "sonner";
import { MobileCanvasPreview } from "./MobileCanvasPreview";
import { BusinessModelCanvasSimple } from "./BusinessModelCanvasSimple";
import { hexToColorName } from "../lib/colorUtils";

interface CanvasItem {
  text: string;
  color: 'blue' | 'green' | 'yellow' | 'pink' | 'purple' | 'global' | 'gray';
  value?: number; // Pro segmenty: pr≈Ømƒõrn√° √∫trata, Pro p≈ô√≠jmy/n√°klady: hodnota v Kƒç
  currentValue?: number; // TEƒé - pro segmenty
  targetValue?: number; // C√çL - pro segmenty
}

interface ValidationRule {
  id: string;
  title: string;
  description: string;
  check: (data: any) => { passed: boolean; message: string; tip?: string };
  severity: 'error' | 'warning' | 'success';
}

// Helper function for color names (podporuje HEX i n√°zvy)
const getColorName = (color: string): string => {
  // P≈ôeveƒè HEX ‚Üí n√°zev
  const colorName = hexToColorName(color);
  
  // P≈ôidej emoji
  const names: Record<string, string> = {
    blue: 'üîµ Modr√°',
    green: 'üü¢ Zelen√°',
    yellow: 'üü° ≈Ωlut√°',
    purple: 'üü£ Fialov√°',
    pink: 'ü©∑ R≈Ø≈æov√°',
    global: 'üåê Glob√°ln√≠',
    gray: '‚ö´ ≈†ed√°',
    red: 'üî¥ ƒåerven√°',
    orange: 'üü† Oran≈æov√°'
  };
  return names[colorName] || color;
};

const VALIDATION_RULES: ValidationRule[] = [

  {
    id: 'has-segments',
    title: '‚úÖ Z√°kaznick√© segmenty',
    description: 'Mus√≠te m√≠t alespo≈à 1 konkr√©tn√≠ segment',
    check: (data) => {
      const segments = data.segments || [];
      if (segments.length === 0) {
        return { passed: false, message: '‚ùå Chyb√≠ z√°kaznick√© segmenty!', tip: 'P≈ôidejte alespo≈à 1 konkr√©tn√≠ skupinu z√°kazn√≠k≈Ø (nap≈ô. "Rodiƒçe s dƒõtmi 3-6 let")' };
      }
      if (segments.length >= 2) {
        return { passed: true, message: 'üéâ M√°te v√≠ce segment≈Ø - skvƒõl√©!', tip: 'Diverzifikace z√°kazn√≠k≈Ø sni≈æuje riziko' };
      }
      return { passed: true, message: '‚úÖ M√°te definovan√Ω segment' };
    },
    severity: 'error'
  },
  {
    id: 'color-usage',
    title: 'üé® Pou≈æit√≠ barev',
    description: 'Barvy pom√°haj√≠ rozli≈°it r≈Øzn√© produkty/segmenty',
    check: (data) => {
      const allColors = new Set<string>();
      let totalItems = 0;
      
      Object.values(data).forEach((items: any) => {
        if (Array.isArray(items)) {
          items.forEach((item: CanvasItem) => {
            totalItems++;
            if (item.color && item.color !== 'white') {
              allColors.add(item.color);
            }
          });
        }
      });
      
      if (totalItems === 0) {
        return { passed: false, message: '‚ö†Ô∏è Canvas je pr√°zdn√Ω', tip: 'Zaƒçnƒõte p≈ôid√°v√°n√≠m z√°kaznick√Ωch segment≈Ø' };
      }
      
      if (allColors.size === 0) {
        return { 
          passed: true, 
          message: 'üí° Tip: Zkuste pou≈æ√≠t barvy', 
          tip: 'Ka≈æd√° barva = jeden produkt/slu≈æba. üåê Glob√°ln√≠ = pro cel√Ω byznys. Pom≈Ø≈æe v√°m to l√©pe vidƒõt n√°vaznosti!' 
        };
      }
      
      if (allColors.size === 1) {
        return { passed: true, message: '‚úÖ Pou≈æ√≠v√°te barvy pro rozli≈°en√≠', tip: 'M√°te jeden hlavn√≠ produkt/slu≈æbu' };
      }
      
      return { 
        passed: true, 
        message: `üé® Skvƒõl√©! Rozli≈°ujete ${allColors.size} produkty/slu≈æby barvami`, 
        tip: 'Barvy v√°m pom√°haj√≠ vidƒõt kter√© segmenty, hodnoty a p≈ô√≠jmy k sobƒõ pat≈ô√≠' 
      };
    },
    severity: 'success'
  },
  {
    id: 'optional-sections',
    title: 'üìã Voliteln√© sekce',
    description: 'Kontrola sekc√≠ kter√© nemus√≠ b√Ωt v≈ædy vyplnƒõn√©',
    check: (data) => {
      const partners = data.partners || [];
      const relationships = data.relationships || [];
      const activities = data.activities || [];
      const resources = data.resources || [];
      
      const warnings: string[] = [];
      
      // Partnerstv√≠ - nen√≠ kritick√©, ale doporuƒçen√©
      if (partners.length === 0) {
        warnings.push('‚ö†Ô∏è ≈Ω√°dn√° partnerstv√≠ - OK pokud v≈°e dƒõl√°te sami, ale partne≈ôi mohou u≈°et≈ôit n√°klady');
      }
      
      // Vztahy - doporuƒçen√© pro udr≈æen√≠ z√°kazn√≠k≈Ø
      if (relationships.length === 0) {
        warnings.push('üí° ≈Ω√°dn√© vztahy se z√°kazn√≠ky - p≈ôidejte jak je budete udr≈æovat (vƒõrnostn√≠ program, osobn√≠ servis...)');
      }
      
      // Aktivity - mƒõly by b√Ωt
      if (activities.length === 0) {
        warnings.push('‚ö†Ô∏è ≈Ω√°dn√© kl√≠ƒçov√© aktivity - co dƒõl√°te ka≈æd√Ω den?');
      }
      
      // Zdroje - mƒõly by b√Ωt
      if (resources.length === 0) {
        warnings.push('‚ö†Ô∏è ≈Ω√°dn√© kl√≠ƒçov√© zdroje - co pot≈ôebujete k fungov√°n√≠?');
      }
      
      if (warnings.length > 0) {
        return {
          passed: true,
          message: `‚ö†Ô∏è ${warnings.length} doporuƒçen√≠ pro vylep≈°en√≠`,
          tip: warnings.slice(0, 2).join(' ‚Ä¢ ')
        };
      }
      
      return { 
        passed: true, 
        message: `‚úÖ V≈°echny voliteln√© sekce vyplnƒõn√©!`
      };
    },
    severity: 'warning'
  },
  {
    id: 'value-numbers',
    title: 'üí∞ Finanƒçn√≠ data',
    description: 'P≈ô√≠jmy a n√°klady mus√≠ m√≠t ƒç√≠sla',
    check: (data) => {
      const revenue = data.revenue || [];
      const costs = data.costs || [];
      
      const revenueWithNumbers = revenue.filter((item: CanvasItem) => item.value !== undefined);
      const costsWithNumbers = costs.filter((item: CanvasItem) => item.value !== undefined);
      
      if (revenue.length === 0 || costs.length === 0) {
        return { passed: false, message: '‚ùå Chyb√≠ p≈ô√≠jmy nebo n√°klady', tip: 'Vypl≈àte sekce Revenue a Costs' };
      }
      
      // ‚úÖ ODSTRANƒöNO: Kontrola ƒç√°stek (data se ukl√°daj√≠ na pozad√≠)
      // if (revenueWithNumbers.length === 0 || costsWithNumbers.length === 0) {
      //   return { passed: false, message: '‚ö†Ô∏è Chyb√≠ ƒç√°stky u p≈ô√≠jm≈Ø/n√°klad≈Ø', tip: 'Kliknƒõte na polo≈æku a p≈ôidejte ƒç√≠selnou hodnotu' };
      // }
      
      const totalRevenue = revenueWithNumbers.reduce((sum: number, item: CanvasItem) => sum + (item.value || 0), 0);
      const totalCosts = costsWithNumbers.reduce((sum: number, item: CanvasItem) => sum + (item.value || 0), 0);
      
      if (totalRevenue < totalCosts) {
        return { 
          passed: false, 
          message: `üìâ N√°klady (${totalCosts.toLocaleString()} Kƒç) > P≈ô√≠jmy (${totalRevenue.toLocaleString()} Kƒç)`, 
          tip: 'V√°≈° model je zat√≠m ztr√°tov√Ω! Zvy≈°te p≈ô√≠jmy nebo sni≈æte n√°klady.' 
        };
      }
      
      const profit = totalRevenue - totalCosts;
      return { 
        passed: true, 
        message: `üí∞ Zisk: ${profit.toLocaleString()} Kƒç/mƒõs√≠c`, 
        tip: `P≈ô√≠jmy: ${totalRevenue.toLocaleString()} Kƒç - N√°klady: ${totalCosts.toLocaleString()} Kƒç` 
      };
    },
    severity: 'error'
  },
  {
    id: 'channels-exist',
    title: 'üì¢ Kan√°ly komunikace',
    description: 'Mus√≠te m√≠t zp≈Øsob jak oslovit z√°kazn√≠ky',
    check: (data) => {
      const segments = data.segments || [];
      const channels = data.channels || [];
      
      if (segments.length > 0 && channels.length === 0) {
        return { passed: false, message: '‚ö†Ô∏è M√°te segmenty, ale ≈æ√°dn√© kan√°ly', tip: 'Jak oslov√≠te sv√© z√°kazn√≠ky? P≈ôidejte kan√°ly (Facebook ads, email, osobn√≠ kontakt...)' };
      }
      
      if (channels.length >= 1) {
        return { 
          passed: true, 
          message: `‚úÖ M√°te ${channels.length} kan√°l≈Ø komunikace`, 
          tip: 'V√≠ce kan√°l≈Ø = stejn√© segmenty m≈Ø≈æou sd√≠let kan√°ly (nap≈ô. Instagram pro maminky i tat√≠nky)' 
        };
      }
      
      return { passed: true, message: 'üí° P≈ôidejte kan√°ly jak oslov√≠te z√°kazn√≠ky' };
    },
    severity: 'warning'
  },
  {
    id: 'color-cross-validation',
    title: 'üîó Propojen√≠ barev nap≈ô√≠ƒç sekcemi',
    description: 'Ka≈æd√Ω produkt (barva) mus√≠ m√≠t segment ‚Üí hodnotu ‚Üí p≈ô√≠jem',
    check: (data) => {
      const segments = data.segments || [];
      const values = data.value || [];
      const channels = data.channels || [];
      const revenue = data.revenue || [];
      const activities = data.activities || [];
      const partners = data.partners || [];
      
      if (segments.length === 0) {
        return { passed: true, message: 'üí° Nejprve p≈ôidejte z√°kaznick√© segmenty' };
      }
      
      // Get all product colors (excluding global)
      const segmentColors = new Set(segments.filter((s: any) => s.color !== 'global').map((s: any) => s.color));
      const valueColors = new Set(values.filter((v: any) => v.color !== 'global').map((v: any) => v.color));
      const channelColors = new Set(channels.filter((c: any) => c.color !== 'global').map((c: any) => c.color));
      const revenueColors = new Set(revenue.filter((r: any) => r.color !== 'global').map((r: any) => r.color));
      const activityColors = new Set(activities.filter((a: any) => a.color !== 'global').map((a: any) => a.color));
      const partnerColors = new Set(partners.filter((p: any) => p.color !== 'global').map((p: any) => p.color));
      
      // Get ALL colors used anywhere (union of all sets)
      const allColors = new Set([
        ...segmentColors,
        ...valueColors,
        ...revenueColors,
        ...activityColors,
        ...partnerColors
      ]);
      
      const issues: string[] = [];
      const warnings: string[] = [];
      
      // Check each segment color - must have value
      segmentColors.forEach(color => {
        if (!valueColors.has(color)) {
          issues.push(`${getColorName(color)}: Segment BEZ hodnoty!`);
        }
        if (!channelColors.has(color)) {
          issues.push(`${getColorName(color)}: Segment bez kan√°lu`);
        }
      });
      
      // NOV√Å LOGIKA: Hodnoty mus√≠ m√≠t segment (global p≈ô√≠jmy jsou OK)
      valueColors.forEach(color => {
        if (!segmentColors.has(color)) {
          issues.push(`${getColorName(color)}: Hodnota BEZ segmentu! Komu to prod√°v√°te?`);
        }
      });
      
      if (issues.length > 0) {
        return {
          passed: false,
          message: `‚ùå ${issues.length} kritick√Ωch chyb v propojen√≠ barev!`,
          tip: issues.slice(0, 3).join(' ‚Ä¢ ') // Show max 3 issues
        };
      }
      
      if (warnings.length > 0) {
        return {
          passed: true,
          message: `‚ö†Ô∏è ${warnings.length} varov√°n√≠ (nekritick√©)`,
          tip: warnings.slice(0, 2).join(' ‚Ä¢ ')
        };
      }
      
      return {
        passed: true,
        message: `‚úÖ Barvy perfektnƒõ propojen√©! (${segmentColors.size} produkt≈Ø)`,
        tip: `Ka≈æd√Ω produkt m√° segment ‚Üí hodnotu ‚Üí p≈ô√≠jem`
      };
    },
    severity: 'error'
  }
];

interface Props {
  userId: number;
  onComplete: () => void;
  onNavigateNext?: () => void;
  onAchievementUnlocked?: (achievementId: string) => void;
}

// DEMO DATA ODSTRANƒöNA - BYLY NEBEZPEƒåN√â!
// P≈ôepisovala u≈æivatelova data v kurzu bez varov√°n√≠.

export function CanvasValidator({ userId, onComplete, onNavigateNext, onAchievementUnlocked }: Props) {
  const [isCompleted, setIsCompleted] = useState(false);
  const [canvasData, setCanvasData] = useState<any>({});
  const [results, setResults] = useState<any[]>([]);
  const [isValidating, setIsValidating] = useState(false);
  const [showResults, setShowResults] = useState(false);
  const [showCanvasPreview, setShowCanvasPreview] = useState(true);

  // Load Canvas data
  useEffect(() => {
    const loadData = async () => {
      try {
        const { data } = await supabase
          .from('business_canvas_sections')
          .select('*')
          .eq('user_id', userId);
        
        if (data) {
          const formatted: any = {};
          data.forEach(section => {
            formatted[section.section_key] = section.content || [];
          });
          setCanvasData(formatted);
        }
      } catch (err) {
        console.error('Failed to load canvas:', err);
      }
    };
    
    loadData();
  }, [userId]);

  const runValidation = () => {
    setIsValidating(true);
    
    // üèÜ Trigger achievement - First validation
    if (onAchievementUnlocked) {
      onAchievementUnlocked('validator-used');
    }
    
    // Simulate validation delay for effect
    setTimeout(() => {
      const validationResults = VALIDATION_RULES.map(rule => {
        const result = rule.check(canvasData);
        return {
          ...rule,
          ...result
        };
      });
      
      setResults(validationResults);
      setShowResults(true);
      setIsValidating(false);
      
      const errorCount = validationResults.filter(r => !r.passed && r.severity === 'error').length;
      
      if (errorCount === 0) {
        // ‚ùå Odstranƒõno - duplicitn√≠ toast (vizu√°ln√≠ validace staƒç√≠)
      } else {
        // ‚ùå Odstranƒõno - duplicitn√≠ toast (vizu√°ln√≠ validace staƒç√≠)
      }
    }, 1500);
  };

  // DEMO FUNKCE ODSTRANƒöNY - BYLY NEBEZPEƒåN√â!
  // P≈ôepisovaly u≈æivatelova data bez varov√°n√≠.

  const errorCount = results.filter(r => !r.passed && r.severity === 'error').length;
  const warningCount = results.filter(r => !r.passed && r.severity === 'warning').length;
  const passedCount = results.filter(r => r.passed).length;

  // Format canvas data for preview
  const canvasSectionsForPreview = [
    { id: 'segments', title: 'Z√°kaznick√© segmenty', items: canvasData.segments || [] },
    { id: 'value', title: 'Hodnotov√° nab√≠dka', items: canvasData.value || [] },
    { id: 'channels', title: 'Kan√°ly', items: canvasData.channels || [] },
    { id: 'relationships', title: 'Vztahy se z√°kazn√≠ky', items: canvasData.relationships || [] },
    { id: 'revenue', title: 'Zdroje p≈ô√≠jm≈Ø', items: canvasData.revenue || [], valueLabel: 'Cena v Kƒç' },
    { id: 'resources', title: 'Kl√≠ƒçov√© zdroje', items: canvasData.resources || [] },
    { id: 'activities', title: 'Kl√≠ƒçov√© aktivity', items: canvasData.activities || [] },
    { id: 'partners', title: 'Kl√≠ƒçov√° partnerstv√≠', items: canvasData.partners || [] },
    { id: 'costs', title: 'Struktura n√°klad≈Ø', items: canvasData.costs || [], valueLabel: 'N√°klady v Kƒç' }
  ];

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="bg-gradient-to-r from-blue-500 to-purple-600 text-white p-6 rounded-xl">
        <div className="flex items-start justify-between mb-3">
          <div className="flex-1">
            <h3 className="text-xl font-bold mb-2">üîç Validace Canvas</h3>
            <p className="text-blue-100 text-sm mb-3">
              Zkontrolujeme v√°≈° Canvas podle osvƒõdƒçen√Ωch pravidel
            </p>
            <div className="bg-white/10 border border-white/20 rounded-lg p-3 text-xs">
              <p className="text-blue-50 mb-2">
                <strong>üé® Logika barev:</strong>
              </p>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-1 text-blue-100">
                <div>‚Ä¢ Ka≈æd√° barva = jeden produkt/segment</div>
                <div>‚Ä¢ Stejn√° barva = pat≈ô√≠ k sobƒõ</div>
                <div>‚Ä¢ üåê Glob√°ln√≠ = pro cel√Ω byznys (zdroje, n√°klady...)</div>
                <div>‚Ä¢ Barvy propojuj√≠ sekce (segment‚Üíhodnota‚Üíp≈ô√≠jem)</div>
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* Canvas Preview - Toggle */}
      <div className="border-2 border-blue-200 rounded-xl overflow-hidden bg-gradient-to-r from-blue-50 to-indigo-50">
        <button
          onClick={() => setShowCanvasPreview(!showCanvasPreview)}
          className="w-full bg-white/80 hover:bg-white p-4 flex items-center justify-between transition-colors group"
        >
          <div className="flex items-center gap-3">
            {showCanvasPreview ? (
              <EyeOff className="w-5 h-5 text-blue-600 group-hover:scale-110 transition-transform" />
            ) : (
              <Eye className="w-5 h-5 text-blue-600 group-hover:scale-110 transition-transform" />
            )}
            <div className="text-left">
              <h4 className="font-bold text-gray-900">
                {showCanvasPreview ? 'üôà Skr√Ωt Canvas' : 'üëÅÔ∏è Zobrazit v√°≈° Canvas'}
              </h4>
              <p className="text-xs text-gray-600 hidden md:block">
                {showCanvasPreview ? 'Zav≈ô√≠t n√°hled' : 'Desktop: Grid 3√ó3 | Mobile: Seznam sekc√≠'}
              </p>
            </div>
          </div>
          <div className="text-right">
            <span className="text-sm font-bold text-blue-600">
              {canvasSectionsForPreview.reduce((sum, s) => sum + s.items.length, 0)} polo≈æek
            </span>
            <p className="text-xs text-gray-500 hidden md:block">
              {canvasSectionsForPreview.filter(s => s.items.length > 0).length} / 9 sekc√≠
            </p>
          </div>
        </button>
        
        <AnimatePresence>
          {showCanvasPreview && (
            <motion.div
              initial={{ height: 0, opacity: 0 }}
              animate={{ height: "auto", opacity: 1 }}
              exit={{ height: 0, opacity: 0 }}
              transition={{ duration: 0.3 }}
              className="border-t-2 border-gray-200"
            >
              {/* Desktop - Full Grid Canvas */}
              <div className="hidden md:block p-6 bg-gradient-to-br from-gray-50 to-blue-50">
                <div className="mb-4 text-center">
                  <h5 className="text-sm font-bold text-gray-700 mb-1">
                    üìä V√°≈° Business Model Canvas
                  </h5>
                  <p className="text-xs text-gray-600">
                    Toto budeme validovat podle osvƒõdƒçen√Ωch pravidel
                  </p>
                </div>
                <div className="bg-white rounded-xl p-4 shadow-lg border-2 border-blue-200">
                  <BusinessModelCanvasSimple
                    userId={userId}
                    hideTips={true}
                    allowedSection="__NONE__"
                  />
                </div>
              </div>
              
              {/* Mobile - Accordion Preview */}
              <div className="md:hidden p-4 bg-white max-h-96 overflow-y-auto">
                <MobileCanvasPreview 
                  sections={canvasSectionsForPreview} 
                  defaultOpen={false}
                />
              </div>
            </motion.div>
          )}
        </AnimatePresence>
      </div>

      {/* Validation Button */}
      {!showResults && (
        <div className="text-center py-8">
          <Button
            onClick={runValidation}
            disabled={isValidating}
            size="lg"
            className="bg-gradient-to-r from-blue-500 to-blue-600 hover:from-blue-600 hover:to-blue-700 gap-2"
          >
            {isValidating ? (
              <>
                <div className="animate-spin rounded-full h-5 w-5 border-2 border-white border-t-transparent" />
                Kontroluji Canvas...
              </>
            ) : (
              <>
                <CheckCircle className="w-5 h-5" />
                Spustit validaci
              </>
            )}
          </Button>
        </div>
      )}

      {/* Results */}
      <AnimatePresence>
        {showResults && (
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            className="space-y-4"
          >
            {/* Summary */}
            <div className="grid grid-cols-3 gap-3 mb-6">
              <div className="bg-green-50 border-2 border-green-300 p-4 rounded-lg text-center">
                <div className="text-2xl font-bold text-green-700">{passedCount}</div>
                <div className="text-xs text-green-600">√öspƒõ≈°n√©</div>
              </div>
              <div className="bg-yellow-50 border-2 border-yellow-300 p-4 rounded-lg text-center">
                <div className="text-2xl font-bold text-yellow-700">{warningCount}</div>
                <div className="text-xs text-yellow-600">Varov√°n√≠</div>
              </div>
              <div className="bg-red-50 border-2 border-red-300 p-4 rounded-lg text-center">
                <div className="text-2xl font-bold text-red-700">{errorCount}</div>
                <div className="text-xs text-red-600">Chyby</div>
              </div>
            </div>

            {/* Results List */}
            <div className="space-y-3">
              {results.map((result, index) => (
                <motion.div
                  key={result.id}
                  initial={{ opacity: 0, x: -20 }}
                  animate={{ opacity: 1, x: 0 }}
                  transition={{ delay: index * 0.1 }}
                  className={`border-2 rounded-lg p-4 ${
                    result.passed
                      ? 'bg-green-50 border-green-300'
                      : result.severity === 'error'
                      ? 'bg-red-50 border-red-300'
                      : 'bg-yellow-50 border-yellow-300'
                  }`}
                >
                  <div className="flex items-start gap-3">
                    {result.passed ? (
                      <CheckCircle className="w-5 h-5 text-green-600 flex-shrink-0 mt-0.5" />
                    ) : result.severity === 'error' ? (
                      <XCircle className="w-5 h-5 text-red-600 flex-shrink-0 mt-0.5" />
                    ) : (
                      <AlertTriangle className="w-5 h-5 text-yellow-600 flex-shrink-0 mt-0.5" />
                    )}
                    
                    <div className="flex-1">
                      <h4 className="font-bold text-sm mb-1">{result.title}</h4>
                      <p className={`text-sm mb-2 ${
                        result.passed ? 'text-green-700' : result.severity === 'error' ? 'text-red-700' : 'text-yellow-700'
                      }`}>
                        {result.message}
                      </p>
                      {result.tip && (
                        <div className="bg-white/50 rounded p-2 text-xs flex items-start gap-2">
                          <Lightbulb className="w-4 h-4 text-blue-600 flex-shrink-0 mt-0.5" />
                          <span className="text-gray-700">{result.tip}</span>
                        </div>
                      )}
                    </div>
                  </div>
                </motion.div>
              ))}
            </div>

            {/* Action Buttons */}
            {!isCompleted ? (
              <div className="flex gap-3 pt-4">
                <Button
                  onClick={() => setShowResults(false)}
                  variant="outline"
                  className="flex-1"
                >
                  Zkontrolovat znovu
                </Button>
                <Button
                  onClick={() => {
                    setIsCompleted(true);
                    onComplete();
                  }}
                  className="flex-1 bg-gradient-to-r from-green-500 to-green-600 hover:from-green-600 hover:to-green-700 gap-2"
                >
                  {errorCount > 0 ? '‚ö†Ô∏è Pokraƒçovat i p≈ôesto' : '‚úÖ Hotovo - Dokonƒçit lekci'}
                  <ArrowRight className="w-4 h-4" />
                </Button>
              </div>
            ) : (
              <motion.div
                initial={{ opacity: 0, scale: 0.95 }}
                animate={{ opacity: 1, scale: 1 }}
                className="bg-green-50 border-2 border-green-300 rounded-2xl p-6 mt-4"
              >
                <div className="flex items-center gap-3 mb-4">
                  <div className="bg-green-500 rounded-full p-3">
                    <CheckCircle className="w-8 h-8 text-white" />
                  </div>
                  <div className="flex-1">
                    <h3 className="text-2xl font-bold text-green-900">
                      ‚úÖ Lekce dokonƒçena!
                    </h3>
                    <p className="text-sm text-green-700">
                      Skvƒõl√° pr√°ce! M≈Ø≈æete pokraƒçovat na dal≈°√≠ lekci.
                    </p>
                  </div>
                </div>
                
                <div className="flex gap-3">
                  {onNavigateNext && (
                    <Button
                      onClick={onNavigateNext}
                      size="lg"
                      className="flex-1 bg-green-600 hover:bg-green-700"
                    >
                      Pokraƒçovat na dal≈°√≠ lekci ‚Üí
                    </Button>
                  )}
                  <Button
                    onClick={() => setIsCompleted(false)}
                    variant="outline"
                    size="lg"
                  >
                    üîÑ Zkusit znovu
                  </Button>
                </div>
              </motion.div>
            )}

            {errorCount > 0 && (
              <div className="bg-yellow-50 border-l-4 border-yellow-500 p-4 rounded mt-4">
                <p className="text-sm text-yellow-800">
                  üí° <strong>M≈Ø≈æete pokraƒçovat i s chybami!</strong> Doporuƒçujeme ale model vylep≈°it p≈ôed pou≈æit√≠m.
                </p>
              </div>
            )}

            {errorCount === 0 && warningCount > 0 && (
              <div className="bg-blue-50 border-l-4 border-blue-500 p-4 rounded mt-4">
                <p className="text-sm text-blue-800">
                  üí° <strong>Tip:</strong> Vra≈•te se do p≈ôedchoz√≠ch lekc√≠ a dopl≈àte chybƒõj√≠c√≠ polo≈æky.
                  M≈Ø≈æete pou≈æ√≠t navigaci v postrann√≠m menu.
                </p>
              </div>
            )}
          </motion.div>
        )}
      </AnimatePresence>
    </div>
  );
}
