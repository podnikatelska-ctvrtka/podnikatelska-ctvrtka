{
  "version": 3,
  "sources": ["../../../../OneDrive/Dokumenty/GitHub/podnikatelska-ctvrtka/netlify/functions/ecomail-subscribe.js"],
  "sourceRoot": "C:/Users/p3pul/AppData/Local/Temp/tmp-23176-62loD7072PIo",
  "sourcesContent": ["// Ecomail API subscription function\n// Secure proxy to add subscribers to Ecomail list\n\nexport async function handler(event, context) {\n  // Only accept POST requests\n  if (event.httpMethod !== 'POST') {\n    return {\n      statusCode: 405,\n      body: JSON.stringify({ error: 'Method not allowed' })\n    };\n  }\n  \n  // Enable CORS\n  const headers = {\n    'Access-Control-Allow-Origin': '*',\n    'Access-Control-Allow-Headers': 'Content-Type',\n    'Access-Control-Allow-Methods': 'POST, OPTIONS',\n    'Content-Type': 'application/json'\n  };\n  \n  // Handle OPTIONS preflight request\n  if (event.httpMethod === 'OPTIONS') {\n    return {\n      statusCode: 200,\n      headers,\n      body: ''\n    };\n  }\n  \n  try {\n    // Parse request body\n    const { email, name } = JSON.parse(event.body);\n    \n    console.log('\uD83D\uDCE7 Ecomail subscription request:', { email, name });\n    \n    // Validate email\n    if (!email || !email.includes('@')) {\n      return {\n        statusCode: 400,\n        headers,\n        body: JSON.stringify({ error: 'Invalid email address' })\n      };\n    }\n    \n    // Ecomail API credentials from environment variables\n    const ECOMAIL_API_KEY = process.env.ECOMAIL_API_KEY;\n    const ECOMAIL_LIST_ID = process.env.ECOMAIL_LIST_ID;\n    \n    if (!ECOMAIL_API_KEY || !ECOMAIL_LIST_ID) {\n      console.error('\u274C Missing Ecomail credentials in environment variables');\n      return {\n        statusCode: 500,\n        headers,\n        body: JSON.stringify({ error: 'Server configuration error' })\n      };\n    }\n    \n    // \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n    // \uD83D\uDCE7 ADD SUBSCRIBER TO ECOMAIL\n    // \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n    console.log('\uD83D\uDCE4 Adding subscriber to Ecomail...');\n    \n    const ecomailResponse = await fetch(`https://api2.ecomailapp.cz/lists/${ECOMAIL_LIST_ID}/subscribe`, {\n      method: 'POST',\n      headers: {\n        'key': ECOMAIL_API_KEY,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        subscriber_data: {\n          email: email,\n          name: name || '',\n          surname: ''\n        },\n        trigger_autoresponders: true, // Spust\u00ED automation\n        update_existing: true,\n        resubscribe: true\n      })\n    });\n    \n    const ecomailData = await ecomailResponse.json();\n    \n    if (!ecomailResponse.ok) {\n      console.error('\u274C Ecomail API error:', ecomailData);\n      \n      // Check for duplicate email\n      if (ecomailData.errors && ecomailData.errors.email) {\n        return {\n          statusCode: 200,\n          headers,\n          body: JSON.stringify({\n            success: true,\n            message: 'Email already subscribed',\n            duplicate: true\n          })\n        };\n      }\n      \n      throw new Error(`Ecomail API failed: ${JSON.stringify(ecomailData)}`);\n    }\n    \n    console.log('\u2705 Subscriber added to Ecomail:', ecomailData);\n    \n    return {\n      statusCode: 200,\n      headers,\n      body: JSON.stringify({\n        success: true,\n        message: 'Successfully subscribed to Ecomail'\n      })\n    };\n    \n  } catch (error) {\n    console.error('\u274C Subscription error:', error);\n    \n    return {\n      statusCode: 500,\n      headers,\n      body: JSON.stringify({\n        error: error.message || 'Failed to subscribe'\n      })\n    };\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA,eAAsB,QAAQ,OAAO,SAAS;AAE5C,MAAI,MAAM,eAAe,QAAQ;AAC/B,WAAO;AAAA,MACL,YAAY;AAAA,MACZ,MAAM,KAAK,UAAU,EAAE,OAAO,qBAAqB,CAAC;AAAA,IACtD;AAAA,EACF;AAGA,QAAM,UAAU;AAAA,IACd,+BAA+B;AAAA,IAC/B,gCAAgC;AAAA,IAChC,gCAAgC;AAAA,IAChC,gBAAgB;AAAA,EAClB;AAGA,MAAI,MAAM,eAAe,WAAW;AAClC,WAAO;AAAA,MACL,YAAY;AAAA,MACZ;AAAA,MACA,MAAM;AAAA,IACR;AAAA,EACF;AAEA,MAAI;AAEF,UAAM,EAAE,OAAO,KAAK,IAAI,KAAK,MAAM,MAAM,IAAI;AAE7C,YAAQ,IAAI,2CAAoC,EAAE,OAAO,KAAK,CAAC;AAG/D,QAAI,CAAC,SAAS,CAAC,MAAM,SAAS,GAAG,GAAG;AAClC,aAAO;AAAA,QACL,YAAY;AAAA,QACZ;AAAA,QACA,MAAM,KAAK,UAAU,EAAE,OAAO,wBAAwB,CAAC;AAAA,MACzD;AAAA,IACF;AAGA,UAAM,kBAAkB,QAAQ,IAAI;AACpC,UAAM,kBAAkB,QAAQ,IAAI;AAEpC,QAAI,CAAC,mBAAmB,CAAC,iBAAiB;AACxC,cAAQ,MAAM,6DAAwD;AACtE,aAAO;AAAA,QACL,YAAY;AAAA,QACZ;AAAA,QACA,MAAM,KAAK,UAAU,EAAE,OAAO,6BAA6B,CAAC;AAAA,MAC9D;AAAA,IACF;AAKA,YAAQ,IAAI,2CAAoC;AAEhD,UAAM,kBAAkB,MAAM,MAAM,oCAAoC,eAAe,cAAc;AAAA,MACnG,QAAQ;AAAA,MACR,SAAS;AAAA,QACP,OAAO;AAAA,QACP,gBAAgB;AAAA,MAClB;AAAA,MACA,MAAM,KAAK,UAAU;AAAA,QACnB,iBAAiB;AAAA,UACf;AAAA,UACA,MAAM,QAAQ;AAAA,UACd,SAAS;AAAA,QACX;AAAA,QACA,wBAAwB;AAAA;AAAA,QACxB,iBAAiB;AAAA,QACjB,aAAa;AAAA,MACf,CAAC;AAAA,IACH,CAAC;AAED,UAAM,cAAc,MAAM,gBAAgB,KAAK;AAE/C,QAAI,CAAC,gBAAgB,IAAI;AACvB,cAAQ,MAAM,6BAAwB,WAAW;AAGjD,UAAI,YAAY,UAAU,YAAY,OAAO,OAAO;AAClD,eAAO;AAAA,UACL,YAAY;AAAA,UACZ;AAAA,UACA,MAAM,KAAK,UAAU;AAAA,YACnB,SAAS;AAAA,YACT,SAAS;AAAA,YACT,WAAW;AAAA,UACb,CAAC;AAAA,QACH;AAAA,MACF;AAEA,YAAM,IAAI,MAAM,uBAAuB,KAAK,UAAU,WAAW,CAAC,EAAE;AAAA,IACtE;AAEA,YAAQ,IAAI,uCAAkC,WAAW;AAEzD,WAAO;AAAA,MACL,YAAY;AAAA,MACZ;AAAA,MACA,MAAM,KAAK,UAAU;AAAA,QACnB,SAAS;AAAA,QACT,SAAS;AAAA,MACX,CAAC;AAAA,IACH;AAAA,EAEF,SAAS,OAAO;AACd,YAAQ,MAAM,8BAAyB,KAAK;AAE5C,WAAO;AAAA,MACL,YAAY;AAAA,MACZ;AAAA,MACA,MAAM,KAAK,UAAU;AAAA,QACnB,OAAO,MAAM,WAAW;AAAA,MAC1B,CAAC;AAAA,IACH;AAAA,EACF;AACF;",
  "names": []
}
