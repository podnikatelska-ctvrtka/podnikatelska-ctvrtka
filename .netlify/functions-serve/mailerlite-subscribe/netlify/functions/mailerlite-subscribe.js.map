{
  "version": 3,
  "sources": ["../../../../OneDrive/Dokumenty/GitHub/podnikatelska-ctvrtka/netlify/functions/mailerlite-subscribe.js"],
  "sourceRoot": "C:/Users/p3pul/AppData/Local/Temp/tmp-23176-fPxIBkTJJGvf",
  "sourcesContent": ["// MailerLite API subscription function\n// Secure proxy to add subscribers to MailerLite\n\nexport async function handler(event, context) {\n  // Only accept POST requests\n  if (event.httpMethod !== 'POST') {\n    return {\n      statusCode: 405,\n      body: JSON.stringify({ error: 'Method not allowed' })\n    };\n  }\n  \n  // Enable CORS\n  const headers = {\n    'Access-Control-Allow-Origin': '*',\n    'Access-Control-Allow-Headers': 'Content-Type',\n    'Access-Control-Allow-Methods': 'POST, OPTIONS',\n    'Content-Type': 'application/json'\n  };\n  \n  // Handle OPTIONS preflight request\n  if (event.httpMethod === 'OPTIONS') {\n    return {\n      statusCode: 200,\n      headers,\n      body: ''\n    };\n  }\n  \n  try {\n    // Parse request body\n    const { email, name } = JSON.parse(event.body);\n    \n    console.log('\uD83D\uDCE7 MailerLite subscription request:', { email, name });\n    \n    // Validate email\n    if (!email || !email.includes('@')) {\n      return {\n        statusCode: 400,\n        headers,\n        body: JSON.stringify({ error: 'Invalid email address' })\n      };\n    }\n    \n    // MailerLite API credentials from environment variables\n    const MAILERLITE_API_KEY = process.env.MAILERLITE_API_KEY;\n    const MAILERLITE_GROUP_ID = process.env.MAILERLITE_GROUP_ID;\n    \n    if (!MAILERLITE_API_KEY || !MAILERLITE_GROUP_ID) {\n      console.error('\u274C Missing MailerLite credentials in environment variables');\n      return {\n        statusCode: 500,\n        headers,\n        body: JSON.stringify({ error: 'Server configuration error' })\n      };\n    }\n    \n    // \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n    // \uD83D\uDCE7 ADD SUBSCRIBER TO MAILERLITE\n    // \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n    console.log('\uD83D\uDCE4 Adding subscriber to MailerLite...');\n    \n    const mailerliteResponse = await fetch('https://connect.mailerlite.com/api/subscribers', {\n      method: 'POST',\n      headers: {\n        'Authorization': `Bearer ${MAILERLITE_API_KEY}`,\n        'Content-Type': 'application/json',\n        'Accept': 'application/json'\n      },\n      body: JSON.stringify({\n        email: email,\n        fields: {\n          name: name || ''\n        },\n        groups: [MAILERLITE_GROUP_ID], // Add to \"Prelaunch\" group\n        status: 'active', // Automatically confirm subscription\n        subscribed_at: new Date().toISOString()\n      })\n    });\n    \n    const mailerliteData = await mailerliteResponse.json();\n    \n    if (!mailerliteResponse.ok) {\n      console.error('\u274C MailerLite API error:', mailerliteData);\n      \n      // Check for duplicate email (already subscribed)\n      if (mailerliteData.message && mailerliteData.message.includes('already exists')) {\n        console.log('\u26A0\uFE0F Subscriber already exists, returning success anyway');\n        return {\n          statusCode: 200,\n          headers,\n          body: JSON.stringify({\n            success: true,\n            message: 'Email already subscribed',\n            duplicate: true\n          })\n        };\n      }\n      \n      throw new Error(`MailerLite API failed: ${JSON.stringify(mailerliteData)}`);\n    }\n    \n    console.log('\u2705 Subscriber added to MailerLite:', mailerliteData.data);\n    \n    // \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n    // \u2705 SUCCESS RESPONSE\n    // \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n    return {\n      statusCode: 200,\n      headers,\n      body: JSON.stringify({\n        success: true,\n        message: 'Successfully subscribed to MailerLite',\n        subscriber_id: mailerliteData.data.id\n      })\n    };\n    \n  } catch (error) {\n    console.error('\u274C Subscription error:', error);\n    \n    return {\n      statusCode: 500,\n      headers,\n      body: JSON.stringify({\n        error: error.message || 'Failed to subscribe'\n      })\n    };\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA,eAAsB,QAAQ,OAAO,SAAS;AAE5C,MAAI,MAAM,eAAe,QAAQ;AAC/B,WAAO;AAAA,MACL,YAAY;AAAA,MACZ,MAAM,KAAK,UAAU,EAAE,OAAO,qBAAqB,CAAC;AAAA,IACtD;AAAA,EACF;AAGA,QAAM,UAAU;AAAA,IACd,+BAA+B;AAAA,IAC/B,gCAAgC;AAAA,IAChC,gCAAgC;AAAA,IAChC,gBAAgB;AAAA,EAClB;AAGA,MAAI,MAAM,eAAe,WAAW;AAClC,WAAO;AAAA,MACL,YAAY;AAAA,MACZ;AAAA,MACA,MAAM;AAAA,IACR;AAAA,EACF;AAEA,MAAI;AAEF,UAAM,EAAE,OAAO,KAAK,IAAI,KAAK,MAAM,MAAM,IAAI;AAE7C,YAAQ,IAAI,8CAAuC,EAAE,OAAO,KAAK,CAAC;AAGlE,QAAI,CAAC,SAAS,CAAC,MAAM,SAAS,GAAG,GAAG;AAClC,aAAO;AAAA,QACL,YAAY;AAAA,QACZ;AAAA,QACA,MAAM,KAAK,UAAU,EAAE,OAAO,wBAAwB,CAAC;AAAA,MACzD;AAAA,IACF;AAGA,UAAM,qBAAqB,QAAQ,IAAI;AACvC,UAAM,sBAAsB,QAAQ,IAAI;AAExC,QAAI,CAAC,sBAAsB,CAAC,qBAAqB;AAC/C,cAAQ,MAAM,gEAA2D;AACzE,aAAO;AAAA,QACL,YAAY;AAAA,QACZ;AAAA,QACA,MAAM,KAAK,UAAU,EAAE,OAAO,6BAA6B,CAAC;AAAA,MAC9D;AAAA,IACF;AAKA,YAAQ,IAAI,8CAAuC;AAEnD,UAAM,qBAAqB,MAAM,MAAM,kDAAkD;AAAA,MACvF,QAAQ;AAAA,MACR,SAAS;AAAA,QACP,iBAAiB,UAAU,kBAAkB;AAAA,QAC7C,gBAAgB;AAAA,QAChB,UAAU;AAAA,MACZ;AAAA,MACA,MAAM,KAAK,UAAU;AAAA,QACnB;AAAA,QACA,QAAQ;AAAA,UACN,MAAM,QAAQ;AAAA,QAChB;AAAA,QACA,QAAQ,CAAC,mBAAmB;AAAA;AAAA,QAC5B,QAAQ;AAAA;AAAA,QACR,gBAAe,oBAAI,KAAK,GAAE,YAAY;AAAA,MACxC,CAAC;AAAA,IACH,CAAC;AAED,UAAM,iBAAiB,MAAM,mBAAmB,KAAK;AAErD,QAAI,CAAC,mBAAmB,IAAI;AAC1B,cAAQ,MAAM,gCAA2B,cAAc;AAGvD,UAAI,eAAe,WAAW,eAAe,QAAQ,SAAS,gBAAgB,GAAG;AAC/E,gBAAQ,IAAI,kEAAwD;AACpE,eAAO;AAAA,UACL,YAAY;AAAA,UACZ;AAAA,UACA,MAAM,KAAK,UAAU;AAAA,YACnB,SAAS;AAAA,YACT,SAAS;AAAA,YACT,WAAW;AAAA,UACb,CAAC;AAAA,QACH;AAAA,MACF;AAEA,YAAM,IAAI,MAAM,0BAA0B,KAAK,UAAU,cAAc,CAAC,EAAE;AAAA,IAC5E;AAEA,YAAQ,IAAI,0CAAqC,eAAe,IAAI;AAKpE,WAAO;AAAA,MACL,YAAY;AAAA,MACZ;AAAA,MACA,MAAM,KAAK,UAAU;AAAA,QACnB,SAAS;AAAA,QACT,SAAS;AAAA,QACT,eAAe,eAAe,KAAK;AAAA,MACrC,CAAC;AAAA,IACH;AAAA,EAEF,SAAS,OAAO;AACd,YAAQ,MAAM,8BAAyB,KAAK;AAE5C,WAAO;AAAA,MACL,YAAY;AAAA,MACZ;AAAA,MACA,MAAM,KAAK,UAAU;AAAA,QACnB,OAAO,MAAM,WAAW;AAAA,MAC1B,CAAC;AAAA,IACH;AAAA,EACF;AACF;",
  "names": []
}
