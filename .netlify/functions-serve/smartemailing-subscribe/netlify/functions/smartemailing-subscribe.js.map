{
  "version": 3,
  "sources": ["../../../../OneDrive/Dokumenty/GitHub/podnikatelska-ctvrtka/netlify/functions/smartemailing-subscribe.js"],
  "sourceRoot": "C:/Users/p3pul/AppData/Local/Temp/tmp-23176-XoqTE5pcPO4P",
  "sourcesContent": ["// Smartemailing API subscription function\n// Secure proxy to add subscribers to Smartemailing list\n\nexport async function handler(event, context) {\n  // Only accept POST requests\n  if (event.httpMethod !== 'POST') {\n    return {\n      statusCode: 405,\n      body: JSON.stringify({ error: 'Method not allowed' })\n    };\n  }\n  \n  // Enable CORS\n  const headers = {\n    'Access-Control-Allow-Origin': '*',\n    'Access-Control-Allow-Headers': 'Content-Type',\n    'Access-Control-Allow-Methods': 'POST, OPTIONS',\n    'Content-Type': 'application/json'\n  };\n  \n  // Handle OPTIONS preflight request\n  if (event.httpMethod === 'OPTIONS') {\n    return {\n      statusCode: 200,\n      headers,\n      body: ''\n    };\n  }\n  \n  try {\n    // Parse request body\n    const { email, name } = JSON.parse(event.body);\n    \n    console.log('\uD83D\uDCE7 Smartemailing subscription request:', { email, name });\n    \n    // Validate email\n    if (!email || !email.includes('@')) {\n      return {\n        statusCode: 400,\n        headers,\n        body: JSON.stringify({ error: 'Invalid email address' })\n      };\n    }\n    \n    // Smartemailing API credentials from environment variables\n    const SMARTEMAILING_USERNAME = process.env.SMARTEMAILING_USERNAME;\n    const SMARTEMAILING_API_KEY = process.env.SMARTEMAILING_API_KEY;\n    const SMARTEMAILING_LIST_ID = process.env.SMARTEMAILING_LIST_ID;\n    \n    if (!SMARTEMAILING_USERNAME || !SMARTEMAILING_API_KEY || !SMARTEMAILING_LIST_ID) {\n      console.error('\u274C Missing Smartemailing credentials in environment variables');\n      return {\n        statusCode: 500,\n        headers,\n        body: JSON.stringify({ error: 'Server configuration error' })\n      };\n    }\n    \n    // Create Basic Auth token\n    const authToken = Buffer.from(`${SMARTEMAILING_USERNAME}:${SMARTEMAILING_API_KEY}`).toString('base64');\n    \n    // \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n    // \uD83D\uDCE7 ADD SUBSCRIBER TO SMARTEMAILING\n    // \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n    console.log('\uD83D\uDCE4 Adding subscriber to Smartemailing:', email);\n    \n    const smartemailingResponse = await fetch(`https://app.smartemailing.cz/api/v3/import`, {\n      method: 'POST',\n      headers: {\n        'Authorization': `Basic ${authToken}`,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        settings: {\n          update: true, // Update existing contacts\n          field_policy: 'FILL_IN_EMPTY'\n        },\n        data: [{\n          emailaddress: email,\n          name: name || '',\n          surname: '',\n          contactlists: [\n            {\n              id: parseInt(SMARTEMAILING_LIST_ID),\n              status: 'confirmed' // D\u016Fle\u017Eit\u00E9: status kontaktu v listu\n            }\n          ],\n          // Custom fields podle pot\u0159eby\n          customfields: {\n            // source: 'landing_page_prelaunch'\n          }\n        }]\n      })\n    });\n    \n    const smartemailingData = await smartemailingResponse.json();\n    \n    // \u26A0\uFE0F D\u016ELE\u017DIT\u00C9: Smartemailing vrac\u00ED r\u016Fzn\u00E9 statusy p\u0159i \u00FAsp\u011Bchu!\n    // \"ok\" = update existuj\u00EDc\u00EDho kontaktu\n    // \"created\" = nov\u00FD kontakt vytvo\u0159en\n    // \"error\" = chyba\n    const successStatuses = ['ok', 'created'];\n    \n    if (!smartemailingResponse.ok || !successStatuses.includes(smartemailingData.status)) {\n      console.error('\u274C Smartemailing API error:', smartemailingData);\n      throw new Error(`Smartemailing API failed: ${JSON.stringify(smartemailingData)}`);\n    }\n    \n    console.log('\u2705 Subscriber added to Smartemailing:', smartemailingData);\n    \n    // Extract contact info from response\n    const contactInfo = smartemailingData.data?.[0] || smartemailingData;\n    \n    return {\n      statusCode: 200,\n      headers,\n      body: JSON.stringify({\n        success: true,\n        message: smartemailingData.status === 'created' \n          ? 'Email successfully added to Smartemailing list!'\n          : 'Email updated in Smartemailing list!',\n        status: smartemailingData.status,\n        contactId: contactInfo.contact_id,\n        data: smartemailingData\n      })\n    };\n    \n  } catch (error) {\n    console.error('\u274C Subscription error:', error);\n    \n    return {\n      statusCode: 500,\n      headers,\n      body: JSON.stringify({\n        error: error.message || 'Failed to subscribe'\n      })\n    };\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
